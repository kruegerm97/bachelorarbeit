Natürlich! Hier ist ein Python-Skript, das mithilfe von `pandas` die Excel-Datei mit den Kriminalitätsdaten von 2014 bis 2023 einliest, die relevanten Tabellen zusammenführt und den Bezirk mit den meisten Straftaten über alle Jahre hinweg ermittelt.

### Voraussetzungen

Stelle sicher, dass du die folgenden Python-Pakete installiert hast:

- `pandas`
- `openpyxl` (für das Einlesen von Excel-Dateien)

Du kannst sie mit `pip` installieren:

```bash
pip install pandas openpyxl
```

### Python-Skript

```python
import pandas as pd

def find_district_with_most_crimes(file_path):
    """
    Liest die Kriminalitätsdaten aus der gegebenen Excel-Datei,
    führt die Daten über alle Jahre zusammen und gibt den Bezirk mit den meisten Straftaten zurück.
    
    :param file_path: Pfad zur Excel-Datei "Fallzahlen&HZ2014-2023.xlsx"
    :return: None (gibt das Ergebnis aus)
    """
    
    # Definiere die Jahre, die in den Sheets enthalten sind
    years = list(range(2014, 2024))  # 2014 bis 2023 inclusive
    sheet_names = [f'Fallzahlen_{year}' for year in years]
    
    # Initialisiere ein Dictionary, um die Gesamtzahlen pro Bezirk zu speichern
    total_crimes = {}
    
    for sheet in sheet_names:
        try:
            # Lese das aktuelle Sheet
            df = pd.read_excel(file_path, sheet_name=sheet)
            
            # Bereinige die Spaltennamen: Entferne Zeilenumbrüche und führende/trailende Leerzeichen
            df.columns = df.columns.str.replace('\n', ' ').str.strip()
            
            # Identifiziere die Spalte für 'Straftaten insgesamt'
            crimes_col = [col for col in df.columns if 'Straftaten' in col and 'insgesamt' in col.lower()]
            if not crimes_col:
                raise ValueError(f"Straftaten insgesamt Spalte nicht gefunden im Sheet: {sheet}")
            crimes_col = crimes_col[0]
            
            # Selektiere die relevanten Spalten
            relevant_df = df[['Bezeichnung (Bezirksregion)', crimes_col]]
            relevant_df = relevant_df.rename(columns={
                'Bezeichnung (Bezirksregion)': 'Bezirksregion',
                crimes_col: 'Straftaten_insgesamt'
            })
            
            # Bereinige die 'Straftaten_insgesamt' Zahlen: Entferne Kommas, Anführungszeichen und ersetze fehlende Werte
            relevant_df['Straftaten_insgesamt'] = relevant_df['Straftaten_insgesamt'].astype(str)\
                .str.replace('"', '')\
                .str.replace(',', '.')\
                .str.replace('–', '0')\
                .str.strip()
            
            # Konvertiere die Spalte in numerische Werte, setze Fehler auf NaN und fülle diese mit 0
            relevant_df['Straftaten_insgesamt'] = pd.to_numeric(relevant_df['Straftaten_insgesamt'], errors='coerce').fillna(0)
            
            # Gruppiere nach Bezirk und summiere die Straftaten
            grouped = relevant_df.groupby('Bezirksregion')['Straftaten_insgesamt'].sum()
            
            # Füge die Summen zum Gesamt-Dictionary hinzu
            for bezirk, sum_crimes in grouped.items():
                if bezirk in total_crimes:
                    total_crimes[bezirk] += sum_crimes
                else:
                    total_crimes[bezirk] = sum_crimes
        
        except Exception as e:
            print(f"Fehler beim Verarbeiten des Sheets {sheet}: {e}")
    
    # Konvertiere das Dictionary zu einem DataFrame für einfachere Handhabung
    total_df = pd.DataFrame(list(total_crimes.items()), columns=['Bezirksregion', 'Total_Straftaten'])
    
    # Finde den Bezirk mit den meisten Straftaten
    max_row = total_df.loc[total_df['Total_Straftaten'].idxmax()]
    
    print(f"Bezirk mit den meisten Straftaten: {max_row['Bezirksregion']} mit {max_row['Total_Straftaten']:.0f} Straftaten.")

# Beispielaufruf
if __name__ == "__main__":
    # Ersetze den Pfad durch den tatsächlichen Pfad zu deiner Excel-Datei
    excel_file_path = 'Fallzahlen&HZ2014-2023.xlsx'
    find_district_with_most_crimes(excel_file_path)
```

### Erklärung des Skripts

1. **Importieren der notwendigen Bibliotheken:**
   - `pandas` ist für die Datenverarbeitung zuständig.
   
2. **Definieren der Funktion `find_district_with_most_crimes`:**
   - **Parameter:** `file_path` – der Pfad zur Excel-Datei.
   - **Prozess:**
     - Erstelle eine Liste der Sheet-Namen basierend auf den Jahren 2014 bis 2023.
     - Für jedes Sheet:
       - Lese das Sheet ein.
       - Bereinige die Spaltennamen, um Zeilenumbrüche und unnötige Leerzeichen zu entfernen.
       - Identifiziere die Spalte, die die Gesamtanzahl der Straftaten enthält (`Straftaten \n-insgesamt-` oder ähnliche Bezeichnungen).
       - Selektiere die relevanten Spalten (Bezirk und Straftaten).
       - Bereinige die Daten in der Straftaten-Spalte, indem Kommas, Anführungszeichen und fehlende Werte entfernt oder ersetzt werden.
       - Konvertiere die Straftaten-Spalte in numerische Werte.
       - Gruppiere die Daten nach Bezirk und summiere die Straftaten.
       - Füge die Summen zum Gesamt-Dictionary hinzu.
     - Nach dem Verarbeiten aller Sheets:
       - Konvertiere das Dictionary in einen DataFrame.
       - Identifiziere den Bezirk mit den meisten Straftaten und gib das Ergebnis aus.

3. **Ausführung des Skripts:**
   - Der `if __name__ == "__main__":` Block stellt sicher, dass die Funktion nur ausgeführt wird, wenn das Skript direkt gestartet wird.
   - Ersetze `'Fallzahlen&HZ2014-2023.xlsx'` mit dem tatsächlichen Pfad zu deiner Excel-Datei, falls diese sich in einem anderen Verzeichnis befindet.

### Ergebnis

Nach der Ausführung des Skripts erhältst du eine Ausgabe ähnlich der folgenden:

```
Bezirk mit den meisten Straftaten: Friedrichshain-Kreuzberg mit 543156 Straftaten.
```

Dieses Ergebnis zeigt den Bezirk ("Bezirksregion") mit der höchsten kumulierten Anzahl an Straftaten über die Jahre 2014 bis 2023.

### Zusätzliche Hinweise

- **Fehlerbehandlung:** Das Skript enthält grundlegende Fehlerbehandlung. Falls ein Sheet nicht den erwarteten Aufbau hat oder eine Spalte fehlt, wird eine Fehlermeldung ausgegeben und der Prozess fortgesetzt.
- **Anpassungen:** Je nach genauer Struktur deiner Excel-Datei (z.B. andere Spaltennamen, zusätzliche Leerzeichen) musst du möglicherweise kleinere Anpassungen am Skript vornehmen.
- **Optimierungen:** Für sehr große Excel-Dateien oder viele Sheets könnten weitere Optimierungen hinsichtlich der Speicherverwaltung und Performance vorgenommen werden.

Ich hoffe, dieses Skript hilft dir weiter! Falls du weitere Anpassungen oder Fragen hast, lass es mich gerne wissen.
