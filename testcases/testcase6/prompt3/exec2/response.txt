Hier ist ein Python-Skript, das die von Ihnen beschriebenen Schritte ausführt. Das Skript verwendet die `pandas` Bibliothek, um die Excel-Datei zu verarbeiten. Stellen Sie sicher, dass `pandas` installiert ist (`pip install pandas openpyxl`), bevor Sie das Skript ausführen.

```python
import pandas as pd

# Schritt 1: Definieren Sie den Dateipfad und die relevanten Sheetnamen
excel_datei = 'Fallzahlen&HZ 2014-2023.xlsx'
jahre = range(2014, 2024)  # 2014 bis 2023 inclusive
sheet_namen = [f'Fallzahlen_{jahr}' for jahr in jahre]

# Schritt 2: Lesen Sie alle Sheets ein und speichern Sie sie in separaten DataFrames
dataframes = {}
for sheet in sheet_namen:
    try:
        df = pd.read_excel(excel_datei, sheet_name=sheet)
        dataframes[sheet] = df
        print(f"Sheet '{sheet}' erfolgreich gelesen.")
    except Exception as e:
        print(f"Fehler beim Lesen des Sheets '{sheet}': {e}")

# Prüfen, ob alle Sheets erfolgreich gelesen wurden
if len(dataframes) != len(sheet_namen):
    print("Nicht alle Sheets wurden erfolgreich gelesen. Bitte überprüfen Sie die Sheetnamen und die Excel-Datei.")
    exit()

# Schritt 3: Fügen Sie alle DataFrames zu einem einzigen DataFrame zusammen
gesamt_df = pd.concat(dataframes.values(), ignore_index=True)
print("Alle Sheets wurden erfolgreich zu einem einzigen DataFrame zusammengeführt.")

# Schritt 4: Definieren Sie die Oberbezirke
oberbezirke = [
    'Mitte',
    'Friedrichshain-Kreuzberg',
    'Pankow',
    'Charlottenburg-Wilmersdorf',
    'Spandau',
    'Steglitz-Zehlendorf',
    'Tempelhof-Schöneberg',
    'Neukölln',
    'Treptow-Köpenick',
    'Marzahn-Hellersdorf',
    'Lichtenberg',
    'Reinickendorf'
]

# Schritt 5: Definieren Sie die Ausschlusskriterien
ausschlusskriterien = oberbezirke + [
    'Berlin (PKS gesamt)',
    'Stadt Berlin, nicht zuzuordnen',
    'Bezirk (Rd), nicht zuzuordnen',
    'Stadtgebiet Berlin, nicht zuzuordnen'
]

# Schritt 6: Filtern Sie die DataFrame, um nur Unterbezirke zu behalten
unterbezirke_df = gesamt_df[~gesamt_df['Bezeichnung (Bezirksregion)'].isin(ausschlusskriterien)]
print(f"Anzahl der verbleibenden Unterbezirke: {unterbezirke_df['Bezeichnung (Bezirksregion)'].nunique()}")

# Schritt 7: Summieren Sie die Straftaten pro Unterbezirk über alle Jahre hinweg
# Stellen Sie sicher, dass die Spalte 'Straftaten \n-insgesamt-' numerisch ist
unterbezirke_df['Straftaten \n-insgesamt-'] = pd.to_numeric(unterbezirke_df['Straftaten \n-insgesamt-'], errors='coerce')

# Gruppieren nach 'Bezeichnung (Bezirksregion)' und summieren
straftaten_summe = unterbezirke_df.groupby('Bezeichnung (Bezirksregion)')['Straftaten \n-insgesamt-'].sum().reset_index()

# Schritt 8: Sortieren Sie die Unterbezirke nach der aggregierten Anzahl an Straftaten absteigend
straftaten_sortiert = straftaten_summe.sort_values(by='Straftaten \n-insgesamt-', ascending=False)

# Schritt 9: Wählen Sie die Top 10 Unterbezirke mit den höchsten Gesamtstraftaten aus
top10_unterbezirke = straftaten_sortiert.head(10)

# Schritt 10: Erstellen Sie den finalen DataFrame mit den gewünschten Spalten
finaler_df = top10_unterbezirke[['Bezeichnung (Bezirksregion)', 'Straftaten \n-insgesamt-']]

# Schritt 11: Ausgabe des finalen DataFrames
print("\nTop 10 Unterbezirke mit den höchsten Gesamtstraftaten:")
print(finaler_df.to_string(index=False))
```

### Erklärung der Schritte:

1. **Import der Bibliothek:**
   - `pandas` wird für die Datenverarbeitung verwendet.

2. **Definition des Dateipfads und der Sheetnamen:**
   - Das Skript erstellt eine Liste von Sheetnamen von `Fallzahlen_2014` bis `Fallzahlen_2023`.

3. **Einlesen der Sheets:**
   - Jeder Sheet wird einzeln gelesen und in einem Dictionary `dataframes` gespeichert. Fehler beim Einlesen werden ausgegeben.

4. **Zusammenführen der DataFrames:**
   - Alle einzelnen DataFrames werden zu einem großen DataFrame `gesamt_df` kombiniert.

5. **Definieren der Oberbezirke:**
   - Eine Liste der Oberbezirke wird erstellt, um diese später auszufiltern.

6. **Ausschlusskriterien festlegen:**
   - Neben den Oberbezirken werden weitere Kategorien wie `'Berlin (PKS gesamt)'` oder `'nicht zuzuordnen'` hinzugefügt, um unerwünschte Einträge zu entfernen.

7. **Filtern der DataFrame:**
   - Der DataFrame wird so gefiltert, dass nur Unterbezirke übrig bleiben.

8. **Summieren der Straftaten:**
   - Die Spalte `'Straftaten \n-insgesamt-'` wird in einen numerischen Typ konvertiert, um Summen bilden zu können.
   - Die Straftaten werden pro Unterbezirk summiert.

9. **Sortieren und Auswahl der Top 10:**
   - Die Unterbezirke werden absteigend nach der Anzahl der Straftaten sortiert.
   - Die Top 10 werden ausgewählt.

10. **Erstellen des finalen DataFrames:**
    - Nur die Spalten `'Bezeichnung (Bezirksregion)'` und die aggregierten Straftaten werden ausgewählt.

11. **Ausgabe des finalen DataFrames:**
    - Der finale DataFrame wird ohne Index ausgegeben.

### Zusätzliche Hinweise:

- **Fehlerbehandlung:** Das Skript überprüft, ob alle erwarteten Sheets erfolgreich eingelesen wurden. Andernfalls wird das Skript beendet und eine Fehlermeldung ausgegeben.
  
- **Datenbereinigung:** Die Konvertierung der Straftaten-Spalte in einen numerischen Typ ist wichtig, um sicherzustellen, dass die Summen korrekt berechnet werden. Nicht konvertierbare Werte werden als `NaN` gesetzt und von der Summe ausgeschlossen.

- **Optimierung:** Falls die Excel-Datei sehr groß ist, könnte die Performance durch spezifischere Leseoptionen verbessert werden, z.B. durch das Lesen nur relevanter Spalten.

### Beispielausgabe:

```
Sheet 'Fallzahlen_2014' erfolgreich gelesen.
...
Sheet 'Fallzahlen_2023' erfolgreich gelesen.
Alle Sheets wurden erfolgreich zu einem einzigen DataFrame zusammengeführt.
Anzahl der verbleibenden Unterbezirke: 96

Top 10 Unterbezirke mit den höchsten Gesamtstraftaten:
Bezeichnung (Bezirksregion)  Straftaten 
             Prenzlauer Berg          120000
                  Friedrichshain          115000
                    Kreuzberg          110000
                      Neukölln          105000
                    Lichtenberg          100000
                   Charlottenburg           95000
                     Moabit          90000
                    Steglitz          85000
                    Schöneberg          80000
                  Spandau          75000
```

*Hinweis:* Die obigen Zahlen sind fiktiv und dienen nur zur Illustration. Ihre tatsächlichen Ergebnisse basieren auf den Daten in Ihrer Excel-Datei.

### Ausführung des Skripts:

1. **Speichern des Skripts:**
   - Speichern Sie den obigen Code in einer Python-Datei, z.B. `analyse_straftaten.py`.

2. **Installieren der benötigten Bibliotheken:**
   ```bash
   pip install pandas openpyxl
   ```

3. **Ausführen des Skripts:**
   ```bash
   python analyse_straftaten.py
   ```

Das Skript liest die Excel-Datei, verarbeitet die Daten gemäß den angegebenen Schritten und gibt die Top 10 Unterbezirke mit den höchsten Gesamtstraftaten aus.