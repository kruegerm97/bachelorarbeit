Gerne helfe ich dir dabei, ein Python-Skript zu erstellen, das das Excel-Sheet `'Fallzahlen_2023'` aus deiner Datei `'Fallzahlen&HZ2014-2023.xlsx'` liest, die Daten bereinigt und nach der Anzahl der Straftaten insgesamt pro Bezirk sortiert.

## Schritt-für-Schritt-Anleitung

1. **Installiere die benötigten Bibliotheken**:
   - **pandas**: Zur Datenverarbeitung.
   - **openpyxl**: Zum Lesen von Excel-Dateien.

   ```bash
   pip install pandas openpyxl
   ```

2. **Verstehe die Datenstruktur**:
   - Die Datei enthält mehrere Header-Zeilen und möglicherweise leere Zeilen vor den tatsächlichen Daten.
   - Die relevanten Daten beginnen wahrscheinlich in der fünften Zeile (Index 4 in Python, da die Zählung bei 0 beginnt).

3. **Erstelle das Python-Skript**:

   ```python
   import pandas as pd

   # Dateiname und Sheetname definieren
   excel_file = 'Fallzahlen&HZ2014-2023.xlsx'
   sheet_name = 'Fallzahlen_2023'

   # Anzahl der zu überspringenden Zeilen vor den Daten (hier die ersten 4 Zeilen)
   skip_rows = 4

   # Lese das Excel-Sheet
   df = pd.read_excel(
       excel_file,
       sheet_name=sheet_name,
       skiprows=skip_rows,  # Überspringe die ersten 4 Zeilen
       dtype=str  # Lese alle Daten als Strings, um die Formatierung zu kontrollieren
   )

   # Optional: Anzeigen der ersten Zeilen, um die Struktur zu prüfen
   # print(df.head())

   # Benenne die Spalten um, falls notwendig (abhängig von der tatsächlichen Header-Zeile)
   # Hier nehme ich an, dass die Spalte "Straftaten -insgesamt-" genau so heißt
   # Falls es Leerzeichen oder andere Zeichen gibt, passe den Namen entsprechend an

   # Überprüfe die exakten Spaltennamen
   print("Spaltennamen:", df.columns.tolist())

   # Angenommen, die richtige Spalte heißt "Straftaten \n -insgesamt-"
   # Passen wir den Namen an, falls er Zeilenumbrüche oder zusätzliche Leerzeichen enthält
   df.columns = [col.strip().replace('\n', ' ') for col in df.columns]

   # Identifiziere die genaue Spalte für "Straftaten insgesamt"
   strftaten_col = None
   for col in df.columns:
       if 'Straftaten' in col and 'insgesamt' in col:
           strftaten_col = col
           break

   if not strftaten_col:
       raise ValueError("Die Spalte für 'Straftaten insgesamt' wurde nicht gefunden.")

   print(f"Verwende die Spalte: '{strftaten_col}' für die Sortierung.")

   # Entferne Tausendertrennzeichen und konvertiere die Spalte in numerische Werte
   # Ersetze eventuelle nicht-numerische Einträge mit NaN
   df['Straftaten_gesamt_numeric'] = pd.to_numeric(
       df[strftaten_col].str.replace(',', '').str.strip(),
       errors='coerce'
   )

   # Überprüfe, ob es fehlgeschlagene Konvertierungen gibt
   if df['Straftaten_gesamt_numeric'].isnull().any():
       print("Warnung: Einige Einträge konnten nicht konvertiert werden und werden als NaN behandelt.")

   # Sortiere das DataFrame nach der neuen numerischen Spalte in absteigender Reihenfolge
   sorted_df = df.sort_values(by='Straftaten_gesamt_numeric', ascending=False)

   # Optional: Entferne Einträge, die nicht zu einem Bezirk gehören (z.B. "nicht zuzuordnen")
   # Angenommen, Bezirke haben einen LOR-Schlüssel, der nicht mit "99" oder "0" beginnt
   # Passe dies nach Bedarf an

   # Zum Beispiel:
   # sorted_df = sorted_df[~sorted_df['LOR-Schlüssel (Bezirksregion)'].str.startswith(('99', '0'))]

   # Zeige die sortierten Daten an
   print(sorted_df[['LOR-Schlüssel (Bezirksregion)', 'Bezeichnung (Bezirksregion)', 'Straftaten_gesamt_numeric']])

   # Optional: Speichere die sortierten Daten in eine neue Excel-Datei
   sorted_df.to_excel('Fallzahlen_2023_sortiert.xlsx', index=False)
   ```

## Erklärung des Skripts

1. **Importieren der Bibliotheken**:
   - `pandas` wird für die Datenverarbeitung verwendet.
   
2. **Definieren von Dateiname und Sheetname**:
   - Stelle sicher, dass sich das Skript im gleichen Verzeichnis wie die Excel-Datei befindet oder gib den vollständigen Pfad an.

3. **Lesen der Excel-Datei**:
   - Mit `skiprows=4` überspringen wir die ersten vier Zeilen, die wahrscheinlich Überschriften oder leere Zeilen enthalten.
   - Alle Daten werden zunächst als Strings gelesen, um die Formatierung besser kontrollieren zu können.

4. **Umbenennen der Spalten**:
   - Oft enthalten die Spaltennamen Zeilenumbrüche oder zusätzliche Leerzeichen. Wir bereinigen die Spaltennamen daher.

5. **Identifizieren der relevanten Spalte**:
   - Wir suchen die Spalte, die sowohl "Straftaten" als auch "insgesamt" im Namen enthält.
   
6. **Bereinigen und Konvertieren der Daten**:
   - Entferne Tausendertrennzeichen (Kommas) und konvertiere die Spalte in numerische Werte.
   - Einträge, die nicht konvertiert werden können, werden zu `NaN`.

7. **Sortieren der Daten**:
   - Das DataFrame wird basierend auf der numerischen Spalte in absteigender Reihenfolge sortiert.

8. **Filtern der Daten (Optional)**:
   - Du kannst Bezirke, die nicht zugeordnet sind, aus der Sortierung ausschließen.

9. **Speichern der sortierten Daten**:
   - Die sortierten Daten werden in eine neue Excel-Datei namens `'Fallzahlen_2023_sortiert.xlsx'` gespeichert.

## Hinweise

- **Spaltennamen anpassen**: Stelle sicher, dass die Spaltennamen korrekt sind. Die Druckausgabe der Spaltennamen (`print(df.columns.tolist())`) hilft dir dabei, die genauen Namen zu identifizieren.
  
- **Fehlerbehandlung**: Das Skript enthält eine Warnung, falls einige Einträge nicht konvertiert werden können. Überprüfe diese Fälle manuell, um sicherzustellen, dass deine Daten vollständig und korrekt sind.

- **Anpassungen vornehmen**: Je nach genauer Struktur deiner Excel-Datei und spezifischen Anforderungen musst du möglicherweise Teile des Skripts anpassen.

## Ergebnis

Nach dem Ausführen des Skripts erhältst du eine sortierte Liste der Bezirke nach der Gesamtzahl der Straftaten in 2023. Die Datei `'Fallzahlen_2023_sortiert.xlsx'` enthält diese sortierten Daten und kann für weitere Analysen oder Berichte verwendet werden.

Falls du weitere Anpassungen oder Fragen hast, stehe ich gerne zur Verfügung!
