Gerne helfe ich Ihnen dabei, ein Python-Skript zu erstellen, das Ihre CSV-Datei `FZ_2023.csv` analysiert und die Bezirke nach der Anzahl der Straftaten insgesamt im Jahr 2023 sortiert. Hier ist ein komplettes Skript, das dies mithilfe der `pandas`-Bibliothek erledigt.

### Schritt-für-Schritt Anleitung

1. **Installieren der benötigten Bibliotheken**:
   Stellen Sie sicher, dass Sie `pandas` installiert haben. Wenn nicht, können Sie es mit folgendem Befehl installieren:

   ```bash
   pip install pandas
   ```

2. **Speichern der CSV-Daten**:
   Speichern Sie Ihre CSV-Daten in einer Datei namens `FZ_2023.csv` im selben Verzeichnis wie Ihr Python-Skript.

3. **Erstellen des Python-Skripts**:
   Erstellen Sie eine Python-Datei, z.B. `analyse_pks.py`, und fügen Sie den folgenden Code ein.

### Python-Skript: `analyse_pks.py`

```python
import pandas as pd

def clean_number(value):
    """
    Entfernt Anführungszeichen und Tausender-Trennzeichen,
    und konvertiert den Wert in einen Integer.
    """
    if pd.isna(value):
        return 0
    return int(str(value).replace('"', '').replace(',', '').strip())

def main():
    # Pfad zur CSV-Datei
    csv_file = 'FZ_2023.csv'

    # Öffnen der CSV-Datei und Finden der Header-Zeile
    with open(csv_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    # Suche nach der Header-Zeile, die mit 'LOR-Schlüssel (Bezirksregion)' beginnt
    header_line_idx = None
    for idx, line in enumerate(lines):
        if line.startswith('LOR-Schlüssel (Bezirksregion)'):
            header_line_idx = idx
            break

    if header_line_idx is None:
        print("Header-Zeile nicht gefunden.")
        return

    # Laden der Daten mit pandas, überspringen der vorherigen Zeilen
    df = pd.read_csv(
        csv_file,
        delimiter=',',
        skiprows=header_line_idx,
        encoding='utf-8'
    )

    # Anzeigen der ersten Zeilen zur Überprüfung
    # print(df.head())

    # Benennung der relevanten Spalten
    # Angenommen, die Spalten sind wie folgt:
    # 'LOR-Schlüssel (Bezirksregion)', 'Bezeichnung (Bezirksregion)', 'Straftaten - insgesamt-', ...
    bezeichnung_col = 'Bezeichnung (Bezirksregion)'
    strftaten_col = 'Straftaten - insgesamt-'

    # Einige Spaltennamen könnten Leerzeichen oder Zeilenumbrüche enthalten, daher:
    df.columns = df.columns.str.strip().str.replace('\n', ' ')

    # Überprüfen, ob die benötigten Spalten vorhanden sind
    if bezeichnung_col not in df.columns or strftaten_col not in df.columns:
        print(f"Benötigte Spalten '{bezeichnung_col}' oder '{strftaten_col}' nicht gefunden.")
        return

    # Bereinigen der 'Straftaten - insgesamt-' Spalte
    df['Straftaten_insgesamt'] = df[strftaten_col].apply(clean_number)

    # Entfernen von aggregierten oder nicht zugeordnete Bezirke, falls gewünscht
    # Hier behalten wir alle Bezirke, Sie können dies nach Bedarf anpassen

    # Sortieren des DataFrames nach 'Straftaten_insgesamt' absteigend
    df_sorted = df.sort_values(by='Straftaten_insgesamt', ascending=False)

    # Auswählen der relevanten Spalten für die Ausgabe
    output_df = df_sorted[[bezeichnung_col, 'Straftaten_insgesamt']]

    # Zur besseren Lesbarkeit die Zahlen mit Tausender-Trennzeichen formatieren
    output_df['Straftaten_insgesamt'] = output_df['Straftaten_insgesamt'].apply(lambda x: f"{x:,}".replace(',', '.'))

    # Anzeigen der sortierten Bezirke
    print("Bezirke sortiert nach der Anzahl der Straftaten insgesamt (2023):\n")
    print(output_df.to_string(index=False))

    # Optional: Speichern der sortierten Liste in eine neue CSV-Datei
    output_df.to_csv('Sortierte_Bezirge_Straftaten_2023.csv', index=False, encoding='utf-8')

if __name__ == "__main__":
    main()
```

### Erklärung des Skripts

1. **Importieren der Bibliothek**:
   ```python
   import pandas as pd
   ```

2. **Funktion `clean_number`**:
   Diese Funktion entfernt Anführungszeichen und Tausender-Trennzeichen aus den Zahlenwerten und konvertiert sie in Ganzzahlen.
   ```python
   def clean_number(value):
       if pd.isna(value):
           return 0
       return int(str(value).replace('"', '').replace(',', '').strip())
   ```

3. **Funktion `main`**:
   - **Lesen der Datei und Finden der Header-Zeile**:
     Das Skript durchsucht die Datei nach der Zeile, die mit `'LOR-Schlüssel (Bezirksregion)'` beginnt, um die Daten korrekt einzulesen.
   - **Laden der Daten**:
     Mithilfe von `pandas.read_csv` werden die Daten ab der gefundenen Header-Zeile geladen.
   - **Bereinigen der Daten**:
     Die Spalte `'Straftaten - insgesamt-'` wird bereinigt und in eine neue Spalte `'Straftaten_insgesamt'` als Integer gespeichert.
   - **Sortieren der Daten**:
     Die Bezirke werden nach der Anzahl der Straftaten insgesamt absteigend sortiert.
   - **Ausgabe**:
     Die sortierte Liste wird im Terminal angezeigt und optional in eine neue CSV-Datei `Sortierte_Bezirge_Straftaten_2023.csv` gespeichert.

4. **Ausführen des Skripts**:
   Stellen Sie sicher, dass sich `FZ_2023.csv` im selben Verzeichnis wie `analyse_pks.py` befindet, und führen Sie dann das Skript aus:

   ```bash
   python analyse_pks.py
   ```

### Beispielausgabe

Nach dem Ausführen des Skripts erhalten Sie eine Ausgabe ähnlich der folgenden:

```
Bezirke sortiert nach der Anzahl der Straftaten insgesamt (2023):

    Bezeichnung (Bezirksregion) Straftaten_insgesamt
                            Mitte              83611
        Friedrichshain-Kreuzberg             55838
                    Tempelhof-Schöneberg             41776
...
```

Zusätzlich wird eine neue CSV-Datei `Sortierte_Bezirge_Straftaten_2023.csv` erstellt, die die sortierten Daten enthält.

### Anpassungen

- **Filtern von Nicht-Zugeordneten Bezirken**:
  Wenn Sie Nicht-Zugeordneten Bezirke (z.B. `"Bezirk (Mi), nicht zuzuordnen"`) ausschließen möchten, können Sie den DataFrame vor dem Sortieren filtern:

  ```python
  df = df[~df[bezeichnung_col].str.contains('nicht zuzuordnen', case=False, na=False)]
  ```

- **Fehlerbehandlung**:
  Das Skript enthält grundlegende Fehlerbehandlungen. Für eine robustere Anwendung könnten weitere Prüfungen und Fehlerbehandlungen hinzugefügt werden.

### Fazit

Mit diesem Skript können Sie Ihre Kriminalitätsdaten effizient analysieren und die Bezirke nach der Anzahl der Straftaten insgesamt sortieren. Passen Sie das Skript nach Bedarf an, um weitere Analysen durchzuführen oder zusätzliche Informationen zu extrahieren.
