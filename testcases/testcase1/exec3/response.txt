Um die Daten im Sheet `'Fallzahlen_2023'` der Excel-Datei `'Fallzahlen&HZ2014-2023.xlsx'` nach der Anzahl der insgesamt registrierten Straftaten pro Bezirk im Jahr 2023 zu sortieren, können wir Python in Kombination mit der Bibliothek `pandas` verwenden. Das folgende Skript liest die Excel-Datei, bereinigt die relevanten Daten und sortiert die Bezirke basierend auf der Gesamtzahl der Straftaten.

### Voraussetzungen

1. **Python Installation**: Stellen Sie sicher, dass Python auf Ihrem Computer installiert ist. Sie können Python [hier](https://www.python.org/downloads/) herunterladen und installieren.

2. **Benötigte Bibliotheken**: Installieren Sie die notwendigen Python-Bibliotheken (`pandas` und `openpyxl`) mit pip, falls diese noch nicht installiert sind. Öffnen Sie dazu ein Terminal oder eine Eingabeaufforderung und führen Sie die folgenden Befehle aus:

   ```bash
   pip install pandas openpyxl
   ```

### Python-Skript

Hier ist das vollständige Python-Skript, das die gewünschten Aufgaben ausführt:

```python
import pandas as pd

# Pfad zur Excel-Datei und Name des Sheets
excel_file = 'Fallzahlen&HZ2014-2023.xlsx'
sheet_name = 'Fallzahlen_2023'

# Lesen des Excel-Sheets
# Annahme: Die tatsächlichen Spaltenüberschriften beginnen ab der 5. Zeile (Index 4)
# Passen Sie 'skiprows' entsprechend an, falls die Struktur der Excel-Datei abweicht
df = pd.read_excel(excel_file, sheet_name=sheet_name, skiprows=4, dtype=str)

# Entfernen von Leerzeilen oder Zeilen ohne Bezirksschlüssel
df = df.dropna(subset=['LOR-Schlüssel (Bezirksregion)'])

# Funktion zur Bereinigung und Konvertierung der Zahlen
def clean_number(x):
    if isinstance(x, str):
        # Entfernen von Punkten und Kommas als Tausendertrennzeichen
        return int(x.replace('.', '').replace(',', ''))
    else:
        return x

# Bereinigung der 'Straftaten insgesamt' Spalte
df['Straftaten insgesamt'] = df['Straftaten insgesamt'].apply(clean_number)

# Optional: Bereinigung weiterer relevanter Spalten (falls benötigt)
# Beispiel für 'Raub' Spalte
# df['Raub'] = df['Raub'].apply(clean_number)

# Sortieren des DataFrames nach 'Straftaten insgesamt' in absteigender Reihenfolge
df_sorted = df.sort_values(by='Straftaten insgesamt', ascending=False)

# Zurücksetzen des Indexes nach dem Sortieren
df_sorted = df_sorted.reset_index(drop=True)

# Auswahl relevanter Spalten zur Anzeige
# Sie können weitere Spalten hinzufügen oder entfernen, je nach Bedarf
result = df_sorted[['Bezeichnung (Bezirksregion)', 'Straftaten insgesamt']]

# Anzeige der sortierten Ergebnisse
print(result)

# Optional: Speichern der sortierten Daten in eine neue Excel-Datei
output_file = 'Sortierte_Fallzahlen_2023.xlsx'
df_sorted.to_excel(output_file, sheet_name='Sortiert', index=False)
print(f"\nDie sortierten Daten wurden in '{output_file}' gespeichert.")
```

### Erklärung des Skripts

1. **Importieren der Bibliothek**:
   ```python
   import pandas as pd
   ```
   `pandas` ist eine leistungsstarke Bibliothek zur Datenanalyse und -manipulation.

2. **Definieren des Pfads zur Excel-Datei und des Sheet-Namens**:
   ```python
   excel_file = 'Fallzahlen&HZ2014-2023.xlsx'
   sheet_name = 'Fallzahlen_2023'
   ```

3. **Lesen des Excel-Sheets**:
   ```python
   df = pd.read_excel(excel_file, sheet_name=sheet_name, skiprows=4, dtype=str)
   ```
   - `skiprows=4`: Überspringt die ersten 4 Zeilen, da die tatsächlichen Spaltenüberschriften ab der 5. Zeile beginnen.
   - `dtype=str`: Liest alle Daten zunächst als Strings, um die Verarbeitung zu erleichtern.

4. **Entfernen von irrelevanten Zeilen**:
   ```python
   df = df.dropna(subset=['LOR-Schlüssel (Bezirksregion)'])
   ```
   Entfernt Zeilen, in denen der Bezirksschlüssel (`LOR-Schlüssel (Bezirksregion)`) fehlt.

5. **Bereinigung der Zahlen**:
   ```python
   def clean_number(x):
       if isinstance(x, str):
           return int(x.replace('.', '').replace(',', ''))
       else:
           return x

   df['Straftaten insgesamt'] = df['Straftaten insgesamt'].apply(clean_number)
   ```
   Diese Funktion entfernt Punkte und Kommas aus den Zahlen, um sie anschließend in Ganzzahlen (`int`) umzuwandeln.

6. **Sortieren des DataFrames**:
   ```python
   df_sorted = df.sort_values(by='Straftaten insgesamt', ascending=False)
   df_sorted = df_sorted.reset_index(drop=True)
   ```
   - Sortiert die Daten nach der Spalte `'Straftaten insgesamt'` in absteigender Reihenfolge.
   - Setzt den Index zurück, um eine saubere Reihung zu erhalten.

7. **Auswählen und Anzeigen der relevanten Spalten**:
   ```python
   result = df_sorted[['Bezeichnung (Bezirksregion)', 'Straftaten insgesamt']]
   print(result)
   ```
   Zeigt die Bezirksnamen und die entsprechenden Gesamtzahl der Straftaten an.

8. **Optionale Speicherung der sortierten Daten**:
   ```python
   output_file = 'Sortierte_Fallzahlen_2023.xlsx'
   df_sorted.to_excel(output_file, sheet_name='Sortiert', index=False)
   print(f"\nDie sortierten Daten wurden in '{output_file}' gespeichert.")
   ```
   Speichert die sortierten Daten in eine neue Excel-Datei namens `'Sortierte_Fallzahlen_2023.xlsx'`.

### Ausführung des Skripts

1. **Speichern des Skripts**: Kopieren Sie das obige Skript in eine Datei namens `sort_fallzahlen.py`.

2. **Ausführen des Skripts**: Öffnen Sie ein Terminal oder eine Eingabeaufforderung, navigieren Sie zum Verzeichnis der Skriptdatei und führen Sie folgenden Befehl aus:

   ```bash
   python sort_fallzahlen.py
   ```

3. **Ergebnisse**:
   - Die sortierten Daten werden im Terminal angezeigt.
   - Optional: Eine neue Excel-Datei `'Sortierte_Fallzahlen_2023.xlsx'` wird erstellt, die die sortierten Daten enthält.

### Hinweise

- **Anpassung der `skiprows`**: Falls die tatsächliche Struktur des Excel-Sheets abweicht (z.B. mehr oder weniger Zeilen vor den Spaltenüberschriften), passen Sie den Wert von `skiprows` entsprechend an.

- **Weitere Datenbereinigung**: Je nach Bedarf können Sie weitere Spalten bereinigen und analysieren, indem Sie ähnliche Methoden wie oben anwenden.

- **Fehlerbehandlung**: Für eine robustere Lösung können Sie zusätzliche Fehlerbehandlungen einbauen, um beispielsweise nicht konvertierbare Werte zu handhaben.

Mit diesem Skript können Sie die Daten effizient analysieren und die Bezirke nach der Anzahl der Straftaten im Jahr 2023 sortieren.
