Natürlich! Um die Daten in deinem CSV-Sheet `FZ_2023.csv` zu analysieren und die Bezirke basierend auf der Anzahl der insgesamt gemeldeten Straftaten im Jahr 2023 zu sortieren, kannst du das folgende Python-Skript verwenden. Dieses Skript verwendet die Bibliothek `pandas`, die sich hervorragend für Datenanalysen eignet.

### Schritt-für-Schritt-Anleitung

1. **Installiere die erforderlichen Bibliotheken**

   Stelle sicher, dass du die Bibliothek `pandas` installiert hast. Falls nicht, kannst du sie mit folgendem Befehl installieren:

   ```bash
   pip install pandas
   ```

2. **Speichere dein CSV-Datenblatt**

   Stelle sicher, dass deine Datei `FZ_2023.csv` im gleichen Verzeichnis wie das Python-Skript gespeichert ist. Andernfalls musst du den Pfad zur Datei im Skript entsprechend anpassen.

3. **Python-Skript erstellen**

   Erstelle eine neue Python-Datei, zum Beispiel `sort_crime_data.py`, und füge den folgenden Code ein:

   ```python
   import pandas as pd

   def main():
       # Pfad zur CSV-Datei
       csv_file = 'FZ_2023.csv'

       try:
           # CSV-Datei lesen, die ersten 4 Zeilen überspringen
           df = pd.read_csv(
               csv_file,
               sep=',',
               quotechar='"',
               thousands=',',
               skiprows=4,
               encoding='utf-8'
           )
       except FileNotFoundError:
           print(f"Die Datei {csv_file} wurde nicht gefunden. Bitte überprüfe den Pfad.")
           return
       except Exception as e:
           print(f"Ein Fehler ist beim Lesen der Datei aufgetreten: {e}")
           return

       # Säubere die Spaltennamen (entferne führende/trailende Leerzeichen und Zeilenumbrüche)
       df.columns = df.columns.str.strip().str.replace('\n', ' ').str.replace('\r', ' ')

       # Überprüfen, welche Spalten vorhanden sind
       print("Verfügbare Spalten:")
       for col in df.columns:
           print(f"- {col}")

       # Angenommen, die Spalte für insgesamt Straftaten heißt 'Straftaten -insgesamt-'
       # Möglicherweise musst du den genauen Spaltennamen anpassen
       total_crime_col = 'Straftaten -insgesamt-'

       if total_crime_col not in df.columns:
           print(f"Die erwartete Spalte '{total_crime_col}' wurde nicht gefunden.")
           return

       # Entferne Zeilen, die 'nicht zuzuordnen' enthalten
       df = df[~df['Bezeichnung (Bezirksregion)'].str.contains('nicht zuzuordnen', na=False)]

       # Konvertiere die Spalte für insgesamt Straftaten in numerische Werte
       df[total_crime_col] = pd.to_numeric(df[total_crime_col], errors='coerce')

       # Entferne Zeilen mit fehlenden Werten in der Strafaten-Spalte
       df = df.dropna(subset=[total_crime_col])

       # Sortiere die Daten nach der Anzahl der Straftaten insgesamt in absteigender Reihenfolge
       df_sorted = df.sort_values(by=total_crime_col, ascending=False)

       # Setze den Index zurück für eine saubere Ausgabe
       df_sorted = df_sorted.reset_index(drop=True)

       # Ausgabe der sortierten Daten
       print("\nBezirke sortiert nach der Anzahl der insgesamt gemeldeten Straftaten (2023):\n")
       print(df_sorted[['Bezeichnung (Bezirksregion)', total_crime_col]])

       # Optional: Speichere das Ergebnis in eine neue CSV-Datei
       output_file = 'sorted_crime_data_2023.csv'
       df_sorted[['Bezeichnung (Bezirksregion)', total_crime_col]].to_csv(
           output_file,
           index=False,
           encoding='utf-8'
       )
       print(f"\nDie sortierten Daten wurden in '{output_file}' gespeichert.")

   if __name__ == "__main__":
       main()
   ```

### Erklärung des Skripts

1. **Importieren von pandas**: `pandas` ist eine leistungsfähige Bibliothek zur Datenmanipulation und -analyse.

2. **Lesen der CSV-Datei**:
   - Überspringt die ersten 4 Zeilen (`skiprows=4`), die keine relevanten Daten enthalten.
   - Setzt das Trennzeichen auf Komma (`sep=','`) und den Tausendertrennzeichen auf Komma (`thousands=','`).
   - Verwendet Anführungszeichen (`"`) als Zeichen zur Gruppierung von Textfeldern, die Kommas enthalten können.

3. **Bereinigung der Spaltennamen**: Entfernt unerwünschte Leerzeichen und Zeilenumbrüche aus den Spaltennamen, um eine konsistente Verarbeitung zu gewährleisten.

4. **Auswahl der relevanten Daten**:
   - Entfernt alle Zeilen, die Bezirke mit `'nicht zuzuordnen'` enthalten, da diese keine spezifischen Bezirksdaten repräsentieren.
   - Konvertiert die Spalte für insgesamt Straftaten in numerische Werte, um mathematische Operationen zu ermöglichen.

5. **Sortierung der Daten**: Sortiert die Bezirke basierend auf der Anzahl der insgesamt gemeldeten Straftaten in absteigender Reihenfolge.

6. **Ausgabe und Speicherung der Ergebnisse**:
   - Gibt die sortierten Bezirke mit ihren jeweiligen Straftatenzahlen in der Konsole aus.
   - Optional speichert das Skript die sortierten Daten in eine neue CSV-Datei namens `sorted_crime_data_2023.csv`.

### Ausführen des Skripts

Um das Skript auszuführen, öffne ein Terminal oder eine Eingabeaufforderung, navigiere zum Verzeichnis, in dem sich dein Skript und die CSV-Datei befinden, und führe folgenden Befehl aus:

```bash
python sort_crime_data.py
```

Nach erfolgreichem Lauf solltest du eine Ausgabe sehen, die die Bezirke nach der Anzahl der Straftaten sortiert anzeigt, sowie eine neue Datei `sorted_crime_data_2023.csv`, die diese sortierten Daten enthält.

### Beispielausgabe

```
Verfügbare Spalten:
- LOR-Schlüssel (Bezirksregion)
- Bezeichnung (Bezirksregion)
- Straftaten  -insgesamt-
- Raub
- Straßenraub,
Handtaschen-raub
- Körper-verletzungen 
-insgesamt-
- Gefährl. und schwere Körper-verletzung
- Freiheits-beraubung,
Nötigung,
Bedrohung,
Nachstellung
- Diebstahl 
-insgesamt-
- Diebstahl von Kraftwagen
- Diebstahl 
an/aus Kfz
- Fahrrad-
diebstahl
- Wohnraum-
einbruch
- Branddelikte 
-insgesamt-
- Brand-
stiftung
- Sach-beschädigung -insgesamt-
- Sach-beschädigung durch Graffiti
- Rauschgift-delikte
- Kieztaten

Bezirke sortiert nach der Anzahl der insgesamt gemeldeten Straftaten (2023):

      Bezeichnung (Bezirksregion)  Straftaten  -insgesamt-
0                      Mitte                83611
1         Friedrichshain-Kreuzberg           55738
2                        Lichtenberg          31563
3                       Tempelhof-Schöneberg       41776
...                          ...                    ...
```

*Hinweis: Die tatsächlichen Zahlen können je nach deinem Datensatz variieren.*

### Anpassungen bei Bedarf

- **Spaltennamen anpassen**: Falls die Spaltennamen in deiner CSV-Datei leicht abweichen, musst du vielleicht den Namen der Spalte für insgesamt Straftaten (`'Straftaten -insgesamt-'`) im Skript anpassen.
- **Dateipfade ändern**: Wenn sich deine CSV-Datei in einem anderen Verzeichnis befindet, passe den Pfad in der Variable `csv_file` entsprechend an.
- **Weitere Analysen hinzufügen**: Je nach Bedarf kannst du weitere Analysen oder Visualisierungen hinzufügen, zum Beispiel Diagramme zur Veranschaulichung der Straftatenverteilung.

Ich hoffe, dieses Skript hilft dir bei deiner Analyse! Wenn du weitere Fragen hast oder Anpassungen benötigst, lass es mich wissen.
