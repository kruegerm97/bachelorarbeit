Gerne helfe ich Ihnen dabei, ein Python-Skript zu erstellen, das Ihre CSV-Datei `FZ_2023.csv` analysiert und die Bezirke nach der Anzahl der insgesamt begangenen Straftaten im Jahr 2023 sortiert. Wir werden dafür die Bibliothek `pandas` verwenden, die sehr leistungsfähig für Datenanalyse und -manipulation ist.

## Schritte im Skript

1. **Importieren der notwendigen Bibliotheken**: Wir benötigen `pandas` für die Datenverarbeitung und `matplotlib` optional für die Visualisierung.
2. **Lesen der CSV-Datei**: Die CSV-Datei enthält einige Metadaten und leere Zeilen am Anfang, die wir überspringen müssen.
3. **Datenbereinigung und -umwandlung**: Entfernen von Tausendertrennzeichen und Umwandeln der Zahlen in Ganzzahlen.
4. **Sortieren der Daten**: Sortierung der Bezirke basierend auf der Gesamtzahl der Straftaten.
5. **Anzeige der Ergebnisse**: Ausgabe der sortierten Liste der Bezirke.

## Python-Skript

Installieren Sie zunächst die benötigten Bibliotheken, falls Sie diese noch nicht installiert haben:

```bash
pip install pandas matplotlib
```

Hier ist das vollständige Python-Skript:

```python
import pandas as pd
import matplotlib.pyplot as plt

# Dateiname der CSV-Datei
csv_datei = 'FZ_2023.csv'

# Anzahl der Zeilen, die zu Beginn übersprungen werden müssen
# Basierend auf den bereitgestellten Daten, scheint es 4 initiale Zeilen zu geben
skip_rows = 4

try:
    # Lesen der CSV-Datei mit pandas
    df = pd.read_csv(csv_datei, delimiter=',', encoding='utf-8', skiprows=skip_rows)
except FileNotFoundError:
    print(f"Die Datei {csv_datei} wurde nicht gefunden. Bitte stellen Sie sicher, dass sich die Datei im selben Verzeichnis wie dieses Skript befindet.")
    exit(1)
except pd.errors.ParserError as e:
    print(f"Fehler beim Parsen der CSV-Datei: {e}")
    exit(1)

# Anzeigen der Spalten zur Überprüfung
print("Spalten in der CSV-Datei:")
print(df.columns)

# Überprüfen, ob die notwendigen Spalten vorhanden sind
benoetigte_spalten = ['Bezeichnung (Bezirksregion)', 'Straftaten \n    -insgesamt-']
for spalte in benoetigte_spalten:
    if spalte not in df.columns:
        print(f"Die benötigte Spalte '{spalte}' wurde nicht gefunden. Bitte überprüfen Sie die CSV-Datei.")
        exit(1)

# Umbenennen der Spalten für einfacheren Zugriff
df.rename(columns={
    'Bezeichnung (Bezirksregion)': 'Bezirk',
    'Straftaten \n    -insgesamt-': 'Straftaten_insgesamt'
}, inplace=True)

# Entfernen von Anführungszeichen und Kommas, Umwandlung in Ganzzahlen
df['Straftaten_insgesamt'] = df['Straftaten_insgesamt'].astype(str).str.replace('"', '').str.replace(',', '').astype(int)

# Sortieren der Bezirke nach der Anzahl der Straftaten (absteigend)
df_sortiert = df.sort_values(by='Straftaten_insgesamt', ascending=False)

# Zur besseren Übersicht nur relevante Spalten anzeigen
df_sortiert_relevant = df_sortiert[['Bezirk', 'Straftaten_insgesamt']]

# Ausgabe der sortierten Tabelle
print("\nBezirke sortiert nach der Anzahl der insgesamt begangenen Straftaten (absteigend):")
print(df_sortiert_relevant.to_string(index=False))

# Optional: Visualisierung der Daten
plt.figure(figsize=(12, 8))
plt.barh(df_sortiert_relevant['Bezirk'], df_sortiert_relevant['Straftaten_insgesamt'], color='skyblue')
plt.xlabel('Anzahl der Straftaten insgesamt')
plt.title('Straftaten nach Bezirken in Berlin (2023)')
plt.gca().invert_yaxis()  # Bezirke mit den meisten Straftaten oben anzeigen
plt.tight_layout()
plt.show()
```

## Erklärung des Skripts

1. **Lesen der CSV-Datei**:
    - `pd.read_csv`: Liest die CSV-Datei ein.
    - `delimiter=','`: Gibt das Trennzeichen an (hier Komma).
    - `encoding='utf-8'`: Stellt sicher, dass die Datei korrekt gelesen wird.
    - `skiprows=4`: Überspringt die ersten 4 Zeilen, die Metadaten und leere Zeilen enthalten.

2. **Umbenennen der Spalten**:
    - Um vereinfachten Zugriff zu ermöglichen, benennen wir die relevanten Spalten um.

3. **Datenbereinigung**:
    - Entfernen von Anführungszeichen (`"`) und Kommas (`,`) aus den Zahlen.
    - Umwandlung der bereinigten Strings in Ganzzahlen (`int`).

4. **Sortieren**:
    - Die Daten werden nach der Anzahl der Straftaten in absteigender Reihenfolge sortiert.

5. **Anzeige und Visualisierung**:
    - Die sortierte Liste der Bezirke wird im Terminal ausgegeben.
    - Zusätzlich wird ein Balkendiagramm erstellt, das die Anzahl der Straftaten pro Bezirk visualisiert.

## Nutzung des Skripts

1. **Speichern der CSV-Datei**:
    - Stellen Sie sicher, dass Ihre CSV-Datei korrekt formatiert ist und sich im selben Verzeichnis wie das Python-Skript befindet.

2. **Ausführen des Skripts**:
    - Speichern Sie das obige Skript in einer Datei, z.B. `analyse_straftaten.py`.
    - Öffnen Sie ein Terminal oder eine Eingabeaufforderung und navigieren Sie zum Verzeichnis des Skripts.
    - Führen Sie das Skript mit folgendem Befehl aus:
      ```bash
      python analyse_straftaten.py
      ```

3. **Ergebnisse ansehen**:
    - Nach der Ausführung des Skripts sehen Sie eine sortierte Liste der Bezirke nach der Anzahl der Straftaten.
    - Zusätzlich öffnet sich ein Fenster mit einem Balkendiagramm, das die Verteilung der Straftaten visuell darstellt.

## Anpassungen

- **Anzahl der zu überspringenden Zeilen (`skiprows`)**:
    - Wenn Ihre CSV-Datei eine andere Anzahl von Metadatenzeilen am Anfang hat, passen Sie den Wert von `skiprows` entsprechend an.

- **Spaltennamen überprüfen**:
    - Stellen Sie sicher, dass die Spaltennamen in der CSV-Datei genau mit den im Skript verwendeten Namen übereinstimmen. Eventuell müssen Sie die Spaltennamen im Skript anpassen.

- **Visualisierung anpassen**:
    - Sie können die Visualisierung weiter anpassen, indem Sie Farben, Größen oder andere Parameter ändern, um eine bessere Darstellung zu erreichen.

Ich hoffe, dieses Skript hilft Ihnen bei der Analyse Ihrer Daten. Bei weiteren Fragen oder Anpassungsbedarf stehe ich gerne zur Verfügung!
