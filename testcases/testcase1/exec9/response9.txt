Hier ist ein Python-Skript, das die bereitgestellte CSV-Datei `FZ_2023.csv` analysiert und die Bezirke nach der Gesamtanzahl der Straftaten im Jahr 2023 sortiert. Das Skript verwendet die Bibliothek `pandas`, die leistungsstarke Werkzeuge für Datenanalyse und -manipulation bereitstellt.

## Schritt-für-Schritt-Anleitung

1. **Installiere die benötigten Bibliotheken**: Stelle sicher, dass `pandas` installiert ist. Falls nicht, kannst du es mit `pip` installieren:

    ```bash
    pip install pandas
    ```

2. **Python-Skript erstellen**: Erstelle eine Python-Datei, z.B. `analyse_kriminalitaet.py`, und füge den folgenden Code ein.

## Python-Skript

```python
import pandas as pd

def main():
    # Pfad zur CSV-Datei
    csv_datei = 'FZ_2023.csv'
    
    try:
        # Schritt 1: CSV-Datei einlesen und die ersten 4 Zeilen überspringen
        # Diese Zeilen enthalten Metadaten und leere Zeilen
        df = pd.read_csv(
            csv_datei,
            skiprows=4,                # Überspringt die ersten 4 Zeilen
            sep=',',                   # Komma als Trennzeichen
            encoding='utf-8',          # UTF-8 Encoding
            thousands=',',             # Komma als Tausendertrennzeichen
            engine='python'            # Verwenden des Python-Engines für flexiblere Parser-Optionen
        )
        
        # Schritt 2: Spaltennamen bereinigen (Entfernen von Zeilenumbrüchen und Leerzeichen)
        df.columns = df.columns.str.replace('\n', ' ', regex=True).str.strip()
        
        # Optional: Überprüfen der Spaltennamen
        # print(df.columns)
        
        # Schritt 3: Identifizieren der relevanten Spalten
        # Angenommen, die Spalte für 'Straftaten insgesamt' enthält 'Straftaten' und 'insgesamt' im Namen
        straffaten_col = [col for col in df.columns if 'Straftaten' in col and 'insgesamt' in col.lower()]
        if not straffaten_col:
            raise ValueError("Die Spalte für 'Straftaten insgesamt' wurde nicht gefunden.")
        straffaten_col = straffaten_col[0]
        
        # Identifizieren der Spalte für die Bezirksbezeichnung
        bezirk_col = 'Bezeichnung (Bezirksregion)'
        
        # Schritt 4: Daten bereinigen und sicherstellen, dass die relevanten Spalten numerisch sind
        df[straffaten_col] = pd.to_numeric(df[straffaten_col], errors='coerce')
        
        # Entfernen von Zeilen mit fehlenden Werten in den relevanten Spalten
        df = df.dropna(subset=[bezirk_col, straffaten_col])
        
        # Schritt 5: Sortieren der Bezirke nach der Gesamtanzahl der Straftaten (absteigend)
        df_sorted = df.sort_values(by=straffaten_col, ascending=False)
        
        # Schritt 6: Auswahl der relevanten Spalten für die Ausgabe
        ergebnis_df = df_sorted[[bezirk_col, straffaten_col]].reset_index(drop=True)
        
        # Optional: Anzeigen der sortierten Tabelle
        print(ergebnis_df)
        
        # Schritt 7: Speichern des Ergebnisses in einer neuen CSV-Datei
        ergebnis_df.to_csv('sortierte_straftaten_2023.csv', index=False, encoding='utf-8')
        print("\nDie sortierte Liste wurde in 'sortierte_straftaten_2023.csv' gespeichert.")
    
    except FileNotFoundError:
        print(f"Die Datei '{csv_datei}' wurde nicht gefunden. Bitte überprüfe den Dateipfad.")
    except Exception as e:
        print(f"Ein Fehler ist aufgetreten: {e}")

if __name__ == "__main__":
    main()
```

## Erklärung des Skripts

1. **CSV-Datei einlesen**:
    - Die Funktion `pd.read_csv` liest die CSV-Datei ein.
    - `skiprows=4` überspringt die ersten 4 Zeilen, die Metadaten und leere Zeilen enthalten.
    - `thousands=','` informiert pandas, dass Kommas als Tausendertrennzeichen verwendet werden.
    - `engine='python'` wird verwendet, um flexiblere Parser-Optionen zu unterstützen, insbesondere wenn die CSV-Datei komplexe Strukturen aufweist.

2. **Spaltennamen bereinigen**:
    - Entfernt Zeilenumbrüche und führende/anhängende Leerzeichen aus den Spaltennamen, um die Handhabung zu erleichtern.

3. **Relevante Spalten identifizieren**:
    - Das Skript sucht nach der Spalte, die sowohl "Straftaten" als auch "insgesamt" im Namen enthält.
    - Es wird auch die Bezirksbezeichnungsspalte identifiziert.

4. **Daten bereinigen**:
    - Konvertiert die Werte in der Spalte für die Gesamtanzahl der Straftaten (`straftaten_col`) in numerische Werte. Fehlerhafte Einträge werden zu `NaN`.
    - Entfernt alle Zeilen, die in den relevanten Spalten fehlende Werte aufweisen.

5. **Sortieren**:
    - Sortiert die Daten nach der Gesamtanzahl der Straftaten in absteigender Reihenfolge.

6. **Ausgabe**:
    - Zeigt die sortierte Tabelle in der Konsole an.
    - Speichert die sortierte Liste in einer neuen CSV-Datei namens `sortierte_straftaten_2023.csv`.

## Ausführen des Skripts

Stelle sicher, dass sich die `FZ_2023.csv`-Datei im gleichen Verzeichnis wie das Python-Skript befindet oder passe den Pfad entsprechend an. Führe dann das Skript aus:

```bash
python analyse_kriminalitaet.py
```

Nach der Ausführung findest du die sortierte Liste in der Datei `sortierte_straftaten_2023.csv`.

## Beispielausgabe

Die Konsole zeigt eine sortierte Tabelle ähnlich der folgenden:

```
                    Bezeichnung (Bezirksregion)  Straftaten insgesamt
0                                   Berlin (PKS gesamt)             536695
1                        Friedrichshain-Kreuzberg             55819
2                                Mitte                   83611
3                        Tempelhof-Schöneberg             41776
...                                       ...                   ...
```

Diese Tabelle listet die Bezirke von Berlin nach der Gesamtanzahl der Straftaten im Jahr 2023, beginnend mit dem meisten kriminalitätsbelasteten Bezirk.

## Hinweise

- **Fehlerbehandlung**: Das Skript enthält grundlegende Fehlerbehandlungen, um sicherzustellen, dass die Datei existiert und die relevanten Spalten gefunden werden.
- **Anpassungen**: Falls sich die Struktur der CSV-Datei ändert, muss das Skript möglicherweise angepasst werden, insbesondere der `skiprows`-Parameter und die Logik zur Identifizierung der relevanten Spalten.
- **Erweiterungen**: Das Skript kann erweitert werden, um weitere Analysen durchzuführen, wie z.B. Visualisierungen der Verteilung der Straftaten über die Bezirke.

Ich hoffe, dieses Skript hilft dir bei deiner Analyse der Kriminalitätsdaten in Berlin!
