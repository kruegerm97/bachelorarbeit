Um die Daten im Sheet `'Fallzahlen_2023'` nach der Anzahl der Straftaten insgesamt pro Bezirk für das Jahr 2023 zu sortieren, kannst du das folgende Python-Skript verwenden. Dieses Skript verwendet die Bibliothek `pandas`, um die Excel-Datei zu lesen, die Daten zu bereinigen und sie anschließend nach der gewünschten Spalte zu sortieren.

### Voraussetzungen

1. **Python Installieren:** Stelle sicher, dass Python auf deinem Computer installiert ist. Du kannst Python von [python.org](https://www.python.org/downloads/) herunterladen und installieren.

2. **Benötigte Bibliotheken Installieren:** Installiere die Bibliotheken `pandas` und `openpyxl`, die zum Lesen von Excel-Dateien erforderlich sind. Du kannst sie mit `pip` installieren:

   ```bash
   pip install pandas openpyxl
   ```

### Schritt-für-Schritt Anleitung

1. **Importieren der Bibliotheken:**

   ```python
   import pandas as pd
   ```

2. **Excel-Datei und Sheet laden:**

   Da die Excel-Datei einige einleitende Zeilen enthält, die keine relevanten Daten sind, müssen wir die genauen Zeilen identifizieren, ab denen die Daten beginnen. In deinem Fall beginnen die Daten ab der 5. Zeile (Index 4, da Python bei 0 zu zählen beginnt).

   ```python
   # Datei- und Sheetnamen festlegen
   file_name = 'Fallzahlen&HZ2014-2023.xlsx'
   sheet_name = 'Fallzahlen_2023'

   # Excel-Sheet lesen, die ersten 4 Zeilen überspringen, da sie keine Daten enthalten
   df = pd.read_excel(file_name, sheet_name=sheet_name, header=4, thousands=',')
   ```

3. **Spaltenüberschriften überprüfen:**

   Es ist wichtig sicherzustellen, dass die Spalten korrekt benannt sind. Manchmal können Zeilenumbrüche oder zusätzliche Leerzeichen die Spaltennamen beeinflussen.

   ```python
   # Spaltenüberschriften anzeigen (optional, zur Überprüfung)
   print(df.columns)
   ```

   Überprüfe die Ausgabe und identifiziere den genauen Namen der Spalte, die die Gesamtzahl der Straftaten enthält. Basierend auf deinen Daten nehme ich an, dass die Spalte `'Straftaten - insgesamt-'` heißt. Wenn der Name anders ist, passe den folgenden Code entsprechend an.

4. **Daten sortieren:**

   Nun sortieren wir die Daten nach der Gesamtzahl der Straftaten in absteigender Reihenfolge.

   ```python
   # Sortieren nach der Spalte 'Straftaten - insgesamt-'
   df_sorted = df.sort_values(by='Straftaten -insgesamt-', ascending=False)
   ```

5. **Ergebnis anzeigen oder speichern:**

   Du kannst das sortierte Ergebnis entweder in der Konsole anzeigen lassen oder in eine neue Excel- bzw. CSV-Datei speichern.

   **Anzeigen in der Konsole:**

   ```python
   # Zeige die Top 10 Bezirke mit den meisten Straftaten
   print(df_sorted[['Bezeichnung (Bezirksregion)', 'Straftaten -insgesamt-']].head(10))
   ```

   **Speichern als neue Excel-Datei:**

   ```python
   # Speichern als neue Excel-Datei
   df_sorted.to_excel('sorted_fallzahlen_2023.xlsx', index=False)
   ```

   **Speichern als CSV-Datei:**

   ```python
   # Speichern als CSV-Datei
   df_sorted.to_csv('sorted_fallzahlen_2023.csv', index=False)
   ```

### Komplettes Skript

Hier ist das vollständige Python-Skript, das alle oben genannten Schritte zusammenfasst:

```python
import pandas as pd

# Datei- und Sheetnamen festlegen
file_name = 'Fallzahlen&HZ2014-2023.xlsx'
sheet_name = 'Fallzahlen_2023'

# Excel-Sheet lesen, die ersten 4 Zeilen überspringen
df = pd.read_excel(file_name, sheet_name=sheet_name, header=4, thousands=',')

# OPTIONAL: Überprüfe die Spaltenüberschriften
#print(df.columns)

# Überprüfen, ob die Spalten 'Bezeichnung (Bezirksregion)' und 'Straftaten -insgesamt-' existieren
required_columns = ['Bezeichnung (Bezirksregion)', 'Straftaten -insgesamt-']
for col in required_columns:
    if col not in df.columns:
        raise ValueError(f"Spalte '{col}' nicht gefunden. Überprüfe die Spaltennamen.")

# Sortieren nach der Gesamtzahl der Straftaten in absteigender Reihenfolge
df_sorted = df.sort_values(by='Straftaten -insgesamt-', ascending=False)

# Ergebnis anzeigen (Top 10 Bezirke)
print(df_sorted[['Bezeichnung (Bezirksregion)', 'Straftaten -insgesamt-']].head(10))

# Ergebnis in eine neue Excel-Datei speichern
df_sorted.to_excel('sorted_fallzahlen_2023.xlsx', index=False)

# OPTIONAL: Ergebnis als CSV speichern
# df_sorted.to_csv('sorted_fallzahlen_2023.csv', index=False)
```

### Erklärung des Skripts

- **Lesen der Excel-Datei:** Die Funktion `pd.read_excel()` wird verwendet, um die Excel-Datei zu lesen. Der Parameter `header=4` überspringt die ersten 4 Zeilen, die keine relevanten Daten enthalten. Der Parameter `thousands=','` sorgt dafür, dass die Tausendertrennzeichen korrekt interpretiert werden.

- **Überprüfen der Spalten:** Das Skript überprüft, ob die benötigten Spalten vorhanden sind. Falls nicht, wird ein Fehler ausgegeben, der dich auffordert, die Spaltennamen zu überprüfen.

- **Sortieren der Daten:** Mit `sort_values()` werden die Daten nach der Spalte `'Straftaten -insgesamt-'` in absteigender Reihenfolge sortiert.

- **Speichern des Ergebnisses:** Das sortierte DataFrame wird entweder in der Konsole angezeigt oder in eine neue Excel- bzw. CSV-Datei gespeichert.

### Hinweise

- **Anpassung der Spaltennamen:** Falls die Spalten in deiner Excel-Datei anders benannt sind (z.B. durch Zeilenumbrüche oder zusätzliche Leerzeichen), musst du die Spaltennamen im Skript entsprechend anpassen.

- **Weitere Analysen:** Dieses Skript sortiert lediglich die Daten. Du kannst es erweitern, um weitere Analysen durchzuführen, z.B. Visualisierungen mit `matplotlib` oder `seaborn`, statistische Auswertungen usw.

- **Fehlerbehandlung:** Das Skript enthält grundlegende Fehlerprüfungen. Für größere Projekte empfiehlt es sich, umfassendere Fehlerbehandlungen und Validierungen einzubauen.

Ich hoffe, dieses Skript hilft dir weiter! Falls du weitere Anpassungen oder zusätzliche Funktionen benötigst, lass es mich wissen.
