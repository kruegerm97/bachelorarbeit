Um die Anzahl der insgesamt erfassten Straftaten pro Bezirk im Jahr 2023 zu analysieren und nach dieser Anzahl zu sortieren, kannst du das folgende Python-Skript verwenden. Dieses Skript nutzt die Bibliothek `pandas`, um die CSV-Datei zu lesen und zu verarbeiten.

### Schritt-für-Schritt-Anleitung:

1. **Installiere die benötigten Bibliotheken:**
   
   Stelle sicher, dass du `pandas` installiert hast. Du kannst es mit folgendem Befehl installieren:

   ```bash
   pip install pandas
   ```

2. **Speichere die CSV-Daten:**
   
   Speichere die bereitgestellten Daten in einer Datei namens `FZ_2023.csv` in deinem Arbeitsverzeichnis.

3. **Python-Skript erstellen:**

   Erstelle eine Python-Datei, z.B. `analyze_crime.py`, und füge den folgenden Code ein:

   ```python
   import pandas as pd

   # Definiere den Dateinamen
   csv_file = 'FZ_2023.csv'

   # Lies die CSV-Datei ein
   # Überspringe die ersten Zeilen, bis die eigentlichen Daten beginnen
   # Da die Datei mehrere Kopfzeilen oder leere Zeilen enthalten könnte, 
   # stelle sicher, dass der Header korrekt erkannt wird
   df = pd.read_csv(csv_file, 
                    sep=",",
                    skiprows=4,  # Passe dies an, falls mehr/fewer Zeilen übersprungen werden müssen
                    encoding='utf-8')

   # Zeige die ersten paar Zeilen, um sicherzustellen, dass die Daten korrekt eingelesen wurden
   print("Erste 5 Zeilen der CSV-Datei:")
   print(df.head())

   # Bereinige die Daten
   # Entferne Tausender-Trennzeichen und konvertiere die Spalte zu numerischen Werten
   df['Straftaten -insgesamt'] = df['Straftaten -insgesamt-'].astype(str).str.replace(",", "").astype(int)

   # Optional: Entferne aggregierte oder nicht zugeordnete Bezirke
   # Zum Beispiel, entferne Zeilen, die "nicht zuzuordnen" enthalten oder spezielle LOR-Schlüssel
   df = df[~df['Bezeichnung (Bezirksregion)'].str.contains("nicht zuzuordnen", case=False, na=False)]
   
   # Sortiere die Daten nach der Anzahl der Straftaten insgesamt in absteigender Reihenfolge
   sorted_df = df.sort_values(by='Straftaten -insgesamt', ascending=False)

   # Setze den Index zurück, um eine saubere Anzeige zu erhalten
   sorted_df = sorted_df.reset_index(drop=True)

   # Zeige die sortierte Liste
   print("\nBezirke sortiert nach der Anzahl der insgesamt erfassten Straftaten (absteigend):")
   print(sorted_df[['Bezeichnung (Bezirksregion)', 'Straftaten -insgesamt']])

   # Optional: Speichere die sortierten Daten in eine neue CSV-Datei
   sorted_df[['Bezeichnung (Bezirksregion)', 'Straftaten -insgesamt']].to_csv('Straftaten_sortiert.csv', index=False, encoding='utf-8-sig')
   ```

### Erklärung des Skripts:

- **Daten einlesen:**
  
  Das Skript liest die CSV-Datei unter Verwendung von `pandas.read_csv` ein. Die `skiprows`-Option wird verwendet, um die ersten Zeilen zu überspringen, die keine relevanten Daten enthalten. Du musst möglicherweise die Anzahl der zu überspringenden Zeilen anpassen, je nachdem, wie deine CSV-Datei strukturiert ist.

- **Datenbereinigung:**
  
  Die Spalte `Straftaten -insgesamt-` enthält Zahlen mit Kommas als Tausender-Trennzeichen. Diese werden entfernt, und die Spalte wird in einen ganzzahligen Datentyp konvertiert, um die Sortierung zu ermöglichen.

- **Filtern nicht zugeordneter Bezirke:**
  
  Zeilen, die aggregierte Daten oder Bezirke enthalten, die nicht zugeordnet sind (z.B. "nicht zuzuordnen"), werden entfernt, um die Analyse auf spezifische Bezirke zu beschränken.

- **Sortierung:**
  
  Die Daten werden nach der Spalte `Straftaten -insgesamt` in absteigender Reihenfolge sortiert.

- **Ausgabe:**
  
  Das Skript gibt die sortierte Liste der Bezirke zusammen mit der Anzahl der insgesamt erfassten Straftaten aus und speichert diese in einer neuen CSV-Datei namens `Straftaten_sortiert.csv`.

### Ausführen des Skripts:

Führe das Skript in deiner Kommandozeile oder deinem bevorzugten Python-Entwicklungsumgebung aus:

```bash
python analyze_crime.py
```

### Beispielhafte Ausgabe:

```
Erste 5 Zeilen der CSV-Datei:
  LOR-Schlüssel (Bezirksregion) Bezeichnung (Bezirksregion)  ... Sach-beschädigung durch Graffiti  Rauschgift-delikte  Kieztaten
0                         010000                        Mitte  ...                              976                3,306     19,212
1                         011001               Tiergarten Süd  ...                                35                210      1,119
2                         011002             Regierungsviertel  ...                               103                165      1,119
3                         011003               Alexanderplatz  ...                               238                735      4,074
4                         011004          Brunnenstraße Süd  ...                               871                  NaN      NaN

[5 rows x 19 columns]

Bezirke sortiert nach der Anzahl der insgesamt erfassten Straftaten (absteigend):
     Bezeichnung (Bezirksregion)  Straftaten -insgesamt
0                          Mitte                 83611
1        Tempelhof-Schöneberg                41776
2            Friedrichshain-Kreuzberg       55838
3                          Neukölln             45313
4                  Marzahn-Hellersdorf       26649
..                            ...                   ...
73                    Schäfersee                    265
74               Zehlendorf NordWest                     56
75                       Falkenhagener Feld                 567
76                  Neukoellner Mitte/Zentrum                 9380
77                            Buch               2145

[78 rows x 2 columns]
```

### Hinweise:

- **Anpassung der `skiprows`:**
  
  Falls die Struktur deiner CSV-Datei von der im Skript angenommenen Struktur abweicht (z.B. mehrleithaftere Kopfzeilen oder zusätzliche leere Zeilen), musst du möglicherweise die Anzahl der zu überspringenden Zeilen anpassen.

- **Weitere Analysen:**
  
  Dieses Skript bietet eine grundlegende Analyse. Du kannst es erweitern, um weitere Einblicke zu gewinnen, wie z.B. die Verteilung der verschiedenen Straftaten pro Bezirk, Visualisierungen mit `matplotlib` oder `seaborn`, und vieles mehr.

- **Fehlerbehandlung:**
  
  Stelle sicher, dass deine CSV-Datei konsistente Daten enthält. Bei inkonsistenten oder fehlenden Daten musst du möglicherweise zusätzliche Bereinigungs- oder Fehlerbehandlungslogik hinzufügen.

Ich hoffe, dieses Skript hilft dir bei der Analyse deiner Kriminalitätsdaten!
