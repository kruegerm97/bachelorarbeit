Um die Daten im Sheet `'Fallzahlen_2023'` der Excel-Datei `'Fallzahlen&HZ2014-2023.xlsx'` nach der Anzahl der Straftaten insgesamt pro Bezirk in 2023 zu sortieren, können wir ein Python-Skript unter Verwendung der Bibliothek `pandas` erstellen. Dieses Skript wird die Excel-Datei einlesen, die relevanten Daten bereinigen, die Straftaten insgesamt numerisch interpretieren und die Bezirke basierend auf diesen Werten sortieren.

### Schritte im Skript:

1. **Importieren der notwendigen Bibliotheken:**
   - `pandas` zum Datenhandling.
   - `openpyxl` als Engine zum Lesen von Excel-Dateien.

2. **Lesen der Excel-Datei:**
   - Überspringen der unbrauchbaren Zeilen am Anfang des Sheets (basierend auf den bereitgestellten Daten scheinen die ersten 4 Zeilen Metainformationen zu enthalten).

3. **Bereinigen und Konvertieren der Daten:**
   - Entfernen von Tausendertrennzeichen (Kommas) und Anführungszeichen in den Zahlenwerten.
   - Umwandeln der bereinigten Strings in numerische Werte (Ganzzahlen).

4. **Sortieren der Daten:**
   - Sortieren der Bezirke basierend auf der Anzahl der Straftaten insgesamt in absteigender Reihenfolge.

5. **Ausgabe der sortierten Daten:**
   - Anzeige der sortierten Liste oder Speichern in einer neuen Excel-Datei.

### Python-Skript:

Stellen Sie sicher, dass Sie die Bibliotheken `pandas` und `openpyxl` installiert haben. Falls nicht, können Sie sie mit `pip` installieren:

```bash
pip install pandas openpyxl
```

Hier ist das vollständige Python-Skript:

```python
import pandas as pd

# Pfad zur Excel-Datei
excel_file = 'Fallzahlen&HZ2014-2023.xlsx'

# Name des Sheets
sheet_name = 'Fallzahlen_2023'

# Anzahl der Zeilen überspringen (basierend auf den bereitgestellten Daten)
skip_rows = 4  # Anpassung je nach tatsächlichem Aufbau

# Lesen der Excel-Datei
df = pd.read_excel(
    excel_file,
    sheet_name=sheet_name,
    skiprows=skip_rows,
    engine='openpyxl'
)

# Anzeigen der ersten paar Zeilen, um die Struktur zu überprüfen (optional)
#print(df.head())

# Spaltennamen identifizieren und anpassen
# Basierend auf den bereitgestellten Daten könnte die Spalte 'Straftaten insgesamt' anders benannt sein
# Wir gehen davon aus, dass die dritte Spalte die Gesamtzahl der Straftaten enthält
# Falls nötig, passen Sie den Spaltennamen entsprechend an

# Beispiel: Annahme, dass die Spalte 'Straftaten insgesamt' den Namen 'Straftaten insgesamt' hat
# Ansonsten prüfen Sie df.columns und passen Sie den Namen an
# Hier nutze ich den Index der Spalte, falls die Namen nicht exakt passen

# Angenommen, die Spalte mit den Straftaten ist die dritte (Index 2)
# und heißt ähnlich wie "Straftaten insgesamt" in deutscher Sprache

# Festlegen des tatsächlichen Spaltennamens
# Zeigen der Spaltennamen zur Identifizierung (optional)
#print(df.columns)

# Beispielspaltennamen basierend auf den Daten
# Anpassen, falls sie anders benannt sind
# Hier nehme ich an, die Spalte heißt 'Straftaten insgesamt' oder ähnlich
# Eventuell müssen Sie die genaue Bezeichnung aus den Spaltennamen entnehmen

# Finden der Spalte, die "Straftaten insgesamt" entspricht
# Dies kann je nach Excel-Datei variieren
# Hier ein Beispiel, wie man die Spalte identifizieren könnte:

straftaten_spalte = None
for col in df.columns:
    if 'Straftaten' in str(col):
        straffaten_spalte = col
        break

if straffaten_spalte is None:
    raise ValueError("Die Spalte 'Straftaten insgesamt' wurde nicht gefunden.")

# Bereinigen der Straftatenzahlen:
# Entfernen von Anführungszeichen und Kommas, dann Umwandlung in Ganzzahlen
df[straffaten_spalte] = df[straffaten_spalte].astype(str)  # Sicherstellen, dass es ein String ist
df[straffaten_spalte] = df[straffaten_spalte].str.replace('"', '').str.replace(',', '').astype(int)

# Sortieren nach der Straftatenzahl in absteigender Reihenfolge
df_sorted = df.sort_values(by=straffaten_spalte, ascending=False)

# Optional: Zurücksetzen des Indexes
df_sorted.reset_index(drop=True, inplace=True)

# Anzeigen der sortierten Daten
print(df_sorted[['Bezeichnung (Bezirksregion)', straffaten_spalte]])

# Optional: Speichern der sortierten Daten in einer neuen Excel-Datei
output_file = 'Sortierte_Fallzahlen_2023.xlsx'
df_sorted.to_excel(output_file, sheet_name='Sortiert', index=False)
print(f"Die sortierten Daten wurden in '{output_file}' gespeichert.")
```

### Erklärung der wichtigsten Schritte:

1. **Lesen der Excel-Datei:**
   - `skiprows=4`: Überspringt die ersten 4 Zeilen, die keine relevanten Daten enthalten.
   - `engine='openpyxl'`: Verwendet `openpyxl` zum Lesen der Excel-Datei.

2. **Identifizieren der relevanten Spalte:**
   - Das Skript sucht nach einer Spalte, deren Name das Wort "Straftaten" enthält. Dies ermöglicht eine flexible Anpassung, falls der genaue Spaltenname leicht variiert.

3. **Datenbereinigung:**
   - Entfernt Anführungszeichen und Kommas aus den Zahlenwerten.
   - Wandelt die bereinigten Strings in Ganzzahlen (`int`) um, um numerische Operationen zu ermöglichen.

4. **Sortierung:**
   - Sortiert die DataFrame-Einträge basierend auf der bereinigten Straftatenzahl in absteigender Reihenfolge (`ascending=False`).

5. **Ausgabe:**
   - Zeigt die sortierten Bezirke zusammen mit ihren Straftatenzahlen an.
   - Speichert die sortierten Daten optional in einer neuen Excel-Datei namens `'Sortierte_Fallzahlen_2023.xlsx'`.

### Wichtige Hinweise:

- **Anpassung der `skiprows`:** Stellen Sie sicher, dass die Anzahl der zu überspringenden Zeilen (`skip_rows`) korrekt ist. Basierend auf den bereitgestellten Daten scheinen die ersten 4 Zeilen Metainformationen zu enthalten, aber dies kann variieren.
  
- **Spaltennamen überprüfen:** Es ist möglich, dass die Spaltennamen in Ihrer Excel-Datei leicht unterschiedlich sind. Überprüfen Sie die Spaltennamen mit `print(df.columns)` und passen Sie den Code entsprechend an.

- **Fehlerbehandlung:** Das Skript enthält eine grundlegende Fehlerbehandlung, um sicherzustellen, dass die relevante Spalte gefunden wird. Bei Bedarf können weitere Überprüfungen hinzugefügt werden.

### Beispielausgabe:

Nach Ausführung des Skripts erhalten Sie eine sortierte Liste der Bezirke mit der höchsten Anzahl an Straftaten insgesamt bis zur niedrigsten. Zudem wird eine neue Excel-Datei mit den sortierten Daten erstellt.

```plaintext
    Bezeichnung (Bezirksregion)  Straftaten insgesamt
0                     Mitte               83611
1         Friedrichshain-Kreuzberg               55838
2                    Tempelhof-Schöneberg               41776
...
```

Diese strukturierte und sortierte Darstellung ermöglicht eine einfache Analyse und Weiterverarbeitung der Kriminalitätsdaten für das Jahr 2023.
