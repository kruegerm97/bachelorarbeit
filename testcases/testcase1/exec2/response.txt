Natürlich, ich helfe Ihnen gerne dabei, ein Python-Skript zu erstellen, das das Sheet `'Fallzahlen_2023'` Ihrer Excel-Datei `'Fallzahlen&HZ2014-2023.xlsx'` nach der Anzahl der `Straftaten insgesamt` eines Bezirks in 2023 sortiert. Dazu verwenden wir die Bibliothek `pandas`, die sich hervorragend für die Datenmanipulation und -analyse eignet.

## Schritt-für-Schritt Anleitung

1. **Installieren der notwendigen Bibliotheken**:
   
   Stellen Sie sicher, dass Sie die Bibliotheken `pandas` und `openpyxl` installiert haben. Falls nicht, können Sie diese mit `pip` installieren:

   ```bash
   pip install pandas openpyxl
   ```

2. **Python-Skript erstellen**:

   Hier ist das Python-Skript, das die gewünschten Aufgaben durchführt:

   ```python
   import pandas as pd

   # Pfad zur Excel-Datei
   excel_datei = 'Fallzahlen&HZ2014-2023.xlsx'

   # Einlesen des Sheets 'Fallzahlen_2023'
   # Annahme: Die relevanten Daten beginnen ab der 5. Zeile (Index 4)
   df = pd.read_excel(excel_datei, sheet_name='Fallzahlen_2023', skiprows=4)

   # Anpassen der Spaltennamen, falls sie Leerzeichen oder Sonderzeichen enthalten
   df.columns = df.columns.str.strip().str.replace('\n', ' ').str.replace(' ', '_').str.replace('-', '_').str.replace(',', '').str.replace('.', '')

   # Anzeigen der ersten Zeilen zur Überprüfung
   print("Erste Zeilen des DataFrames:")
   print(df.head())

   # Entfernen von Zeilen, die keine Bezirke enthalten (z.B. Gesamtübersicht)
   # Annahme: Bezirkscode sollte numerisch sein, daher filtern wir Zeilen mit numerischen LOR-Schlüsseln
   df = df[pd.to_numeric(df['LOR-Schlüssel_(Bezirksregion)'], errors='coerce').notnull()]

   # Bereinigen der 'Straftaten_insgesamt' Spalte:
   # Entfernen von Tausendertrennzeichen und Umwandeln in Integer
   df['Straftaten_insgesamt'] = df['Straftaten_insgesamt'].astype(str).str.replace(',', '').astype(int)

   # Sortieren nach 'Straftaten_insgesamt' in absteigender Reihenfolge
   df_sortiert = df.sort_values(by='Straftaten_insgesamt', ascending=False)

   # Anzeigen der sortierten Daten
   print("\nSortierte Daten (nach 'Straftaten_insgesamt'):")
   print(df_sortiert[['Bezeichnung_(Bezirksregion)', 'Straftaten_insgesamt']].head(20))

   # Optional: Speichern der sortierten Daten in eine neue Excel-Datei
   sortierte_datei = 'Fallzahlen_2023_sortiert.xlsx'
   df_sortiert.to_excel(sortierte_datei, index=False)
   print(f"\nDie sortierten Daten wurden in der Datei '{sortierte_datei}' gespeichert.")
   ```

3. **Erläuterungen zum Skript**:

   - **Einlesen der Excel-Datei**:
     
     ```python
     df = pd.read_excel(excel_datei, sheet_name='Fallzahlen_2023', skiprows=4)
     ```
     Hier überspringen wir die ersten 4 Zeilen, da diese offenbar Überschriften oder leere Zeilen enthalten.

   - **Bereinigen der Spaltennamen**:
     
     ```python
     df.columns = df.columns.str.strip().str.replace('\n', ' ').str.replace(' ', '_').str.replace('-', '_').str.replace(',', '').str.replace('.', '')
     ```
     Dies stellt sicher, dass die Spaltennamen keine Leerzeichen oder Sonderzeichen enthalten, was die Handhabung erleichtert.

   - **Filtern der relevanten Zeilen**:
     
     ```python
     df = df[pd.to_numeric(df['LOR-Schlüssel_(Bezirksregion)'], errors='coerce').notnull()]
     ```
     Hier entfernen wir Zeilen, die keinen numerischen Bezirkscode haben, um sicherzustellen, dass nur Bezirke berücksichtigt werden.

   - **Bereinigen und Konvertieren der 'Straftaten_insgesamt' Spalte**:
     
     ```python
     df['Straftaten_insgesamt'] = df['Straftaten_insgesamt'].astype(str).str.replace(',', '').astype(int)
     ```
     Da die Zahlen in der Excel-Datei Tausendertrennzeichen (Kommas) enthalten, entfernen wir diese und konvertieren die Werte in Integer.

   - **Sortieren der Daten**:
     
     ```python
     df_sortiert = df.sort_values(by='Straftaten_insgesamt', ascending=False)
     ```
     Hier sortieren wir die Bezirke nach der Gesamtzahl der Straftaten in absteigender Reihenfolge.

   - **Speichern der sortierten Daten**:
     
     ```python
     df_sortiert.to_excel(sortierte_datei, index=False)
     ```
     Optional speichern wir die sortierten Daten in eine neue Excel-Datei namens `'Fallzahlen_2023_sortiert.xlsx'`.

4. **Ausführen des Skripts**:

   Speichern Sie das obige Skript in einer Datei, zum Beispiel `sortiere_fallzahlen.py`, und führen Sie es aus:

   ```bash
   python sortiere_fallzahlen.py
   ```

   Nach der Ausführung erhalten Sie eine Ausgabe der Top 20 Bezirke mit den höchsten `Straftaten_insgesamt` und eine neue Excel-Datei mit den sortierten Daten.

## Hinweise

- **Überprüfung der Daten**: Es ist immer eine gute Praxis, die ersten paar Zeilen des eingelesenen DataFrames zu überprüfen, um sicherzustellen, dass die Daten korrekt eingelesen wurden. Dies haben wir mit `print(df.head())` gemacht.

- **Anpassung an Ihre Bedürfnisse**: Falls Sie weitere Analysen durchführen oder andere Sortierkriterien anwenden möchten, können Sie das Skript entsprechend erweitern.

- **Fehlerbehandlung**: Das Skript enthält grundlegende Fehlerbehandlungen, wie das Entfernen von Zeilen mit nicht-numerischen Bezirkscodes. Je nach Datenqualität könnten weitere Bereinigungen notwendig sein.

Ich hoffe, dieses Skript hilft Ihnen bei der Analyse Ihrer Kriminalitätsdaten. Wenn Sie weitere Fragen haben oder Unterstützung benötigen, stehe ich Ihnen gerne zur Verfügung!
