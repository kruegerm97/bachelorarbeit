Um die Daten aus dem Sheet `'Fallzahlen_2023'` der Excel-Datei `'Fallzahlen&HZ2014-2023.xlsx'` nach der Anzahl der Straftaten insgesamt pro Bezirk zu sortieren, können wir das `pandas`-Bibliothek in Python verwenden. Unten findest du ein vollständiges Skript, das diese Aufgabe erfüllt:

1. **Installiere notwendige Bibliotheken** (falls noch nicht geschehen):

   ```bash
   pip install pandas openpyxl
   ```

2. **Python-Skript erstellen**:

   ```python
   import pandas as pd

   # Pfad zur Excel-Datei
   excel_file = 'Fallzahlen&HZ2014-2023.xlsx'

   # Lesen des Sheets 'Fallzahlen_2023', Überspringen der ersten 4 Zeilen
   df = pd.read_excel(excel_file, sheet_name='Fallzahlen_2023', skiprows=4)

   # Umbenennen der Spalten für einfacheren Zugriff (optional)
   df.columns = [
       "LOR-Schlüssel", "Bezeichnung", "Straftaten_gesamt", "Raub",
       "Strassenraub_Handtaschenraub", "Koerper_verletzungen_gesamt",
       "Gefaehrliche_schwere_Koerper_verletzung",
       "Freiheitsberaubung_Noetigung_Bedrohung_Nachstellung",
       "Diebstahl_gesamt", "Diebstahl_Kraftwagen",
       "Diebstahl_Kfz", "Fahrraddiebstahl", "Wohnraumeinbruch",
       "Branddelikte_gesamt", "Brandstiftung",
       "Sachbeschadigung_gesamt", "Sachbeschadigung_Graffiti",
       "Rauschgiftdelikte", "Kieztaten"
   ]

   # Entfernen von möglichen Fußzeilen oder nicht relevanten Zeilen
   df = df[~df["LOR-Schlüssel"].isin(["", "Gesamt", "Total"])]

   # Entfernen von Anführungszeichen und Konvertieren der Zahlen
   numeric_cols = [
       "Straftaten_gesamt", "Raub", "Strassenraub_Handtaschenraub",
       "Koerper_verletzungen_gesamt", "Gefaehrliche_schwere_Koerper_verletzung",
       "Freiheitsberaubung_Noetigung_Bedrohung_Nachstellung", "Diebstahl_gesamt",
       "Diebstahl_Kraftwagen", "Diebstahl_Kfz", "Fahrraddiebstahl",
       "Wohnraumeinbruch", "Branddelikte_gesamt", "Brandstiftung",
       "Sachbeschadigung_gesamt", "Sachbeschadigung_Graffiti",
       "Rauschgiftdelikte", "Kieztaten"
   ]

   for col in numeric_cols:
       # Entfernen von Anführungszeichen und Tausendertrennzeichen
       df[col] = df[col].astype(str).str.replace('"', '').str.replace(',', '').str.replace('.', '')
       # Konvertieren zu numerischen Datentypen
       df[col] = pd.to_numeric(df[col], errors='coerce')

   # Sortieren nach 'Straftaten_gesamt' in absteigender Reihenfolge
   df_sorted = df.sort_values(by='Straftaten_gesamt', ascending=False)

   # Optional: Zurücksetzen des Indexes
   df_sorted.reset_index(drop=True, inplace=True)

   # Ausgabe der sortierten Daten
   print(df_sorted[['LOR-Schlüssel', 'Bezeichnung', 'Straftaten_gesamt']])

   # Optional: Speichern der sortierten Daten in eine neue Excel-Datei
   output_file = 'Fallzahlen_2023_sortiert.xlsx'
   df_sorted.to_excel(output_file, sheet_name='Sortiert', index=False)
   print(f"Die sortierten Daten wurden in '{output_file}' gespeichert.")
   ```

3. **Erläuterungen zum Skript**:

   - **Bibliotheken importieren**: Wir verwenden `pandas` zum Datenhandling und `openpyxl` als Engine zum Lesen von Excel-Dateien.
   
   - **Excel-Datei lesen**: Das Skript liest das Sheet `'Fallzahlen_2023'` und überspringt die ersten 4 Zeilen, die keine relevanten Daten enthalten.
   
   - **Spalten benennen**: Für eine einfachere Handhabung werden die Spalten umbenannt. Passe diese Liste an, falls sich die Spaltennamen in deiner Datei unterscheiden.
   
   - **Daten bereinigen**: 
     - Entferne nicht relevante Zeilen (z.B. Zusammenfassungen oder Totals).
     - Entferne Anführungszeichen und Tausendertrennzeichen aus den numerischen Spalten.
     - Konvertiere die bereinigten Strings in numerische Datentypen.
   
   - **Sortieren**: Die Daten werden nach der Spalte `'Straftaten_gesamt'` in absteigender Reihenfolge sortiert.
   
   - **Ausgabe**: Die sortierten Daten werden sowohl in der Konsole angezeigt als auch optional in eine neue Excel-Datei `'Fallzahlen_2023_sortiert.xlsx'` gespeichert.

4. **Ausführen des Skripts**:

   - Stelle sicher, dass sich die Excel-Datei `'Fallzahlen&HZ2014-2023.xlsx'` im gleichen Verzeichnis wie das Skript befindet oder passe den Pfad entsprechend an.
   
   - Führe das Skript in deiner Python-Umgebung aus:
   
     ```bash
     python sort_fallzahlen.py
     ```

   - Nach der Ausführung solltest du die sortierten Daten in der Konsole sehen und die Datei `'Fallzahlen_2023_sortiert.xlsx'` im selben Verzeichnis finden.

5. **Beispielausgabe**:

   Die Ausgabe in der Konsole wird etwa wie folgt aussehen:

   ```
     LOR-Schlüssel                Bezeichnung  Straftaten_gesamt
   0      999999        Berlin (PKS gesamt)            536695
   1      020000  Friedrichshain-Kreuzberg            55738
   2      100000      Marzahn-Hellersdorf            26649
   3      080000                  Neukölln            45313
   ...           ...                        ...                ...
   ```

   Und die Excel-Datei `'Fallzahlen_2023_sortiert.xlsx'` wird die vollständigen sortierten Daten enthalten.

**Hinweis**: Passe das Skript bei Bedarf an spezifische Anforderungen oder Datenstrukturen in deiner Excel-Datei an.
