Gerne helfe ich dir dabei, ein Python-Skript zu erstellen, das das Sheet `'Fallzahlen_2023'` aus deiner Excel-Datei `'Fallzahlen&HZ2014-2023.xlsx'` liest, die Daten bereinigt und die Bezirke basierend auf der Gesamtanzahl der Straftaten in 2023 sortiert.

Hier ist ein vollständiges Python-Skript, das du verwenden kannst:

### Voraussetzungen

1. **Python installiert**: Stelle sicher, dass Python auf deinem Computer installiert ist. Du kannst es von [python.org](https://www.python.org/downloads/) herunterladen und installieren.

2. **Benötigte Bibliotheken installieren**: Das Skript verwendet `pandas` und `openpyxl`. Du kannst diese Bibliotheken mit `pip` installieren:

   ```bash
   pip install pandas openpyxl
   ```

### Python-Skript

```python
import pandas as pd

# Pfad zur Excel-Datei
excel_file = 'Fallzahlen&HZ2014-2023.xlsx'

# Name des Sheets
sheet_name = 'Fallzahlen_2023'

# Anzahl der Zeilen, die übersprungen werden müssen, bevor die Header-Zeile kommt
# Basierend auf deinen Daten nehme ich an, dass die Header in der 5. Zeile (index=4) beginnen
skip_rows = 4

# Lesen des Excel-Sheets
try:
    df = pd.read_excel(
        excel_file,
        sheet_name=sheet_name,
        skiprows=skip_rows,
        thousands=',',  # Entfernt Tausender-Trennzeichen
        engine='openpyxl'
    )
except FileNotFoundError:
    print(f"Die Datei '{excel_file}' wurde nicht gefunden.")
    exit(1)
except Exception as e:
    print(f"Beim Lesen der Excel-Datei ist ein Fehler aufgetreten: {e}")
    exit(1)

# Anzeigen der ersten paar Zeilen, um die Struktur zu verstehen (optional)
# print(df.head())

# Bereinigen der Spaltennamen: Entfernen von Leerzeichen und Zeilenumbrüchen
df.columns = [col.strip().replace('\n', ' ') for col in df.columns]

# Identifizieren der relevanten Spalten
# Angenommen, die Spalte heißt "Straftaten - insgesamt -", passe den Namen ggf. an
straftaten_col = 'Straftaten -insgesamt-'

if straftaten_col not in df.columns:
    print(f"Die Spalte '{straftaten_col}' wurde nicht gefunden. Verfügbare Spalten: {df.columns.tolist()}")
    exit(1)

# Optional: Entfernen von aggregierten oder nicht zugeordneten Bezirken
# Falls du nur tatsächliche Bezirke möchtest, kannst du Zeilen filtern, die bestimmte Schlüssel enthalten
# Beispiel:
# df = df[~df['LOR-Schlüssel (Bezirksregion)'].str.contains('900|999')]

# Entfernen von Bezirken, die nicht zugeordnet sind
df = df[~df['Bezeichnung (Bezirksregion)'].str.contains('nicht zuzuordnen', case=False, na=False)]

# Entfernen von Gesamtwerten, z.B. "Berlin (PKS gesamt)"
df = df[~df['Bezeichnung (Bezirksregion)'].str.contains('gesamt', case=False, na=False)]

# Konvertieren der "Straftaten insgesamt" Spalte zu numerisch
# Fehlerhafte Einträge werden als NaN gesetzt
df[straftaten_col] = pd.to_numeric(df[straftaten_col], errors='coerce')

# Entfernen von Zeilen mit fehlenden "Straftaten insgesamt" Werten
df = df.dropna(subset=[straftaten_col])

# Sortieren nach "Straftaten insgesamt" absteigend
sorted_df = df.sort_values(by=straftaten_col, ascending=False)

# Optional: Zurücksetzen des Indexes
sorted_df = sorted_df.reset_index(drop=True)

# Anzeigen der sortierten Daten
print(sorted_df[['Bezeichnung (Bezirksregion)', straftaten_col]])

# Optional: Speichern der sortierten Daten in eine neue Excel- oder CSV-Datei
# sorted_df.to_excel('Sortierte_Fallzahlen_2023.xlsx', index=False)
# oder
# sorted_df.to_csv('Sortierte_Fallzahlen_2023.csv', index=False, sep=';')  # Mit Semikolon-Trennzeichen für deutsche Excel-Versionen
```

### Erklärung des Skripts

1. **Importieren der Bibliotheken**:
   - `pandas` wird verwendet, um die Excel-Datei zu lesen und zu bearbeiten.

2. **Laden der Excel-Datei**:
   - Das Skript liest das spezifizierte Sheet und überspringt die ersten vier Zeilen, die keine relevanten Daten enthalten.
   - Die `thousands=','` Option sorgt dafür, dass Kommas als Tausender-Trennzeichen interpretiert und entfernt werden.

3. **Bereinigen der Spaltennamen**:
   - Entfernt unnötige Leerzeichen und Zeilenumbrüche aus den Spaltennamen, um den Zugriff zu erleichtern.

4. **Filtern der Daten**:
   - Entfernt Zeilen, die keine spezifischen Bezirke sind (z.B., die aggregierten Bezirke oder nicht zugeordneten Bereiche).
   - Dies basiert auf den Schlüsselwörtern im Spaltennamen `Bezeichnung (Bezirksregion)`.

5. **Konvertieren der Daten**:
   - Die Spalte für die Gesamtanzahl der Straftaten wird in einen numerischen Datentyp konvertiert.
   - Zeilen mit ungültigen oder fehlenden Werten werden entfernt.

6. **Sortieren der Daten**:
   - Sortiert die Bezirke basierend auf der Gesamtanzahl der Straftaten in absteigender Reihenfolge.

7. **Anzeigen und Speichern der Ergebnisse**:
   - Das Skript druckt die sortierte Liste der Bezirke zusammen mit der Anzahl der Straftaten.
   - Optional kann die sortierte Liste in eine neue Excel- oder CSV-Datei gespeichert werden.

### Anpassungen nach Bedarf

- **Spaltennamen**: Stelle sicher, dass der Spaltenname `Straftaten -insgesamt-` exakt mit deinem Excel-Datenblatt übereinstimmt. Passe den `straftaten_col` Variablenwert gegebenenfalls an.

- **Filtern von Bezirken**: Falls du bestimmte Bezirke einschließen oder ausschließen möchtest, kannst du die entsprechenden Filterbedingungen anpassen.

- **Speichern der Ergebnisse**: Aktiviere die `to_excel` oder `to_csv` Zeilen, wenn du die sortierten Daten in einer Datei speichern möchtest.

### Beispielausgabe

Nach dem Ausführen des Skripts erhältst du eine Ausgabe ähnlich der folgenden:

```
        Bezeichnung (Bezirksregion)  Straftaten -insgesamt-
0                   Mitte                   83611.0
1         Friedrichshain-Kreuzberg       55838.0
2                       Neukölln       45313.0
3                Tempelhof-Schöneberg    41776.0
...
```

Diese Liste zeigt die Bezirke sortiert nach der Gesamtanzahl der Straftaten im Jahr 2023, beginnend mit dem Bezirk Mitte.

### Fehlerbehebung

- **Dateipfad**: Stelle sicher, dass das Skript im gleichen Verzeichnis wie die Excel-Datei ausgeführt wird oder gib den vollständigen Pfad zur Datei an.

- **Spaltennamen**: Wenn das Skript an der Stelle der Spaltennamen Probleme hat, überprüfe die tatsächlichen Spaltennamen in der Excel-Datei und passe das Skript entsprechend an.

- **Datenformate**: Falls es weitere Formatierungsprobleme gibt, überprüfe die Excel-Datei auf Inkonsistenzen oder zusätzliche Sonderzeichen.

Ich hoffe, dieses Skript hilft dir weiter! Wenn du weitere Fragen hast oder Anpassungen benötigst, lass es mich bitte wissen.
