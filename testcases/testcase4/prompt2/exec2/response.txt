Hier ist ein vollständiges Python-Skript, das die gewünschten Anforderungen erfüllt. Dieses Skript liest die Excel-Datei `Fallzahlen.xlsx`, extrahiert die relevanten Daten aus jedem Sheet, berechnet die prozentuale Veränderung der Spalte `Straftaten_insgesamt` zum Vorjahr für den Eintrag "Berlin (PKS gesamt)" und erstellt schließlich eine Zeitreihe als Pandas DataFrame.

Stellen Sie sicher, dass Sie die benötigten Bibliotheken installiert haben. Sie können dies mit `pip` tun:

```bash
pip install pandas openpyxl
```

Hier ist das Python-Skript:

```python
import pandas as pd

def compute_percentage_change(excel_file, target_row, target_column, sheet_prefix):
    """
    Liest eine Excel-Datei mit mehreren Sheets, extrahiert die Straftaten_insgesamt für
    einen bestimmten Eintrag und berechnet die prozentuale Veränderung zum Vorjahr.

    Parameters:
    - excel_file: str, Pfad zur Excel-Datei.
    - target_row: str, Der Eintrag in der 'Bezirke' Spalte, z.B. "Berlin (PKS gesamt)".
    - target_column: str, Name der Spalte, deren prozentuale Veränderung berechnet werden soll, z.B. "Straftaten_insgesamt".
    - sheet_prefix: str, Präfix der Sheet-Namen, z.B. "Fallzahlen_" für Sheets wie "Fallzahlen_2014".

    Returns:
    - pandas.DataFrame mit den Jahren und der prozentualen Veränderung.
    """
    try:
        # Alle Sheets einlesen
        sheets_dict = pd.read_excel(excel_file, sheet_name=None, engine='openpyxl')
    except FileNotFoundError:
        print(f"Die Datei {excel_file} wurde nicht gefunden.")
        return None
    except Exception as e:
        print(f"Ein Fehler ist aufgetreten beim Einlesen der Datei: {e}")
        return None

    data = []

    for sheet_name, df in sheets_dict.items():
        # Überprüfen, ob der Sheet-Name dem erwarteten Muster entspricht
        if not sheet_name.startswith(sheet_prefix):
            print(f"Überspringe Sheet '{sheet_name}', da es nicht mit '{sheet_prefix}' beginnt.")
            continue

        # Extrahiere das Jahr aus dem Sheet-Namen
        try:
            year_str = sheet_name.replace(sheet_prefix, "")
            year = int(year_str)
        except ValueError:
            print(f"Konnte das Jahr aus dem Sheet-Namen '{sheet_name}' nicht extrahieren.")
            continue

        # Suche die Zeile mit dem gewünschten Eintrag
        row = df[df['Bezirke'] == target_row]

        if row.empty:
            print(f"Der Eintrag '{target_row}' wurde in Sheet '{sheet_name}' nicht gefunden.")
            continue

        # Extrahiere den Wert der Zielspalte
        try:
            value = row.iloc[0][target_column]
            data.append({'Year': year, target_column: value})
        except KeyError:
            print(f"Die Spalte '{target_column}' wurde in Sheet '{sheet_name}' nicht gefunden.")
            continue

    if not data:
        print("Keine Daten gefunden, um die prozentuale Veränderung zu berechnen.")
        return None

    # Erstelle einen DataFrame aus den gesammelten Daten
    df_data = pd.DataFrame(data)

    # Sortiere die Daten nach Jahr
    df_data = df_data.sort_values('Year').reset_index(drop=True)

    # Berechne die prozentuale Veränderung zum Vorjahr
    df_data['Percentage_Change'] = df_data[target_column].pct_change() * 100

    return df_data[['Year', 'Percentage_Change']]

if __name__ == "__main__":
    # Parameter festlegen
    excel_file = 'Fallzahlen.xlsx'
    target_row = 'Berlin (PKS gesamt)'
    target_column = 'Straftaten_insgesamt'
    sheet_prefix = 'Fallzahlen_'

    # Funktion aufrufen
    percentage_change_df = compute_percentage_change(excel_file, target_row, target_column, sheet_prefix)

    if percentage_change_df is not None:
        print("Prozentuale Veränderung der Straftaten_insgesamt zum Vorjahr:")
        print(percentage_change_df)

        # Optional: DataFrame speichern
        # percentage_change_df.to_csv('prozentuale_veraenderung.csv', index=False)
```

### Erklärung des Skripts

1. **Import der Bibliotheken**:
   - `pandas` wird für die Datenverarbeitung verwendet.

2. **Funktion `compute_percentage_change`**:
   - **Parameter**:
     - `excel_file`: Pfad zur Excel-Datei.
     - `target_row`: Der spezifische Eintrag in der Spalte 'Bezirke', z.B. "Berlin (PKS gesamt)".
     - `target_column`: Die Spalte, für die die prozentuale Veränderung berechnet werden soll, z.B. "Straftaten_insgesamt".
     - `sheet_prefix`: Das Präfix der Sheet-Namen, z.B. "Fallzahlen_".
   - **Prozess**:
     - Öffnet die Excel-Datei und liest alle Sheets ein.
     - Iteriert durch jedes Sheet, extrahiert das Jahr aus dem Sheet-Namen.
     - Sucht die Zeile, die dem `target_row` entspricht.
     - Extrahiert den Wert der `target_column` aus dieser Zeile.
     - Speichert das Jahr und den extrahierten Wert in einer Liste.
     - Nachdem alle Daten gesammelt wurden, wird ein DataFrame erstellt, nach Jahr sortiert und die prozentuale Veränderung berechnet.

3. **Hauptblock (`if __name__ == "__main__":`)**:
   - Setzt die erforderlichen Parameter.
   - Ruft die Funktion `compute_percentage_change` auf.
   - Wenn Daten gefunden werden, werden diese ausgegeben. Optional kann der resultierende DataFrame auch in eine CSV-Datei gespeichert werden (auskommentiert).

### Beispielausgabe

Angenommen, die Excel-Datei enthält Daten von 2014 bis 2023, könnte die Ausgabe wie folgt aussehen:

```
Prozentuale Veränderung der Straftaten_insgesamt zum Vorjahr:
    Year  Percentage_Change
0   2014                NaN
1   2015           5.123456
2   2016          -2.345678
3   2017           3.210987
4   2018          -1.112233
5   2019           4.567890
6   2020          -3.210987
7   2021           2.345678
8   2022           0.987654
9   2023           1.234567
```

*Hinweis*: Der Wert für das Jahr 2014 ist `NaN`, da es keinen Vorjahreswert gibt, mit dem die Veränderung berechnet werden könnte.

### Anpassungen und Erweiterungen

- **Fehlerbehandlung**: Das Skript enthält grundlegende Fehlerbehandlungen, um sicherzustellen, dass fehlende Dateien, nicht gefundene Sheets oder fehlende Spalten ordnungsgemäß behandelt werden.
- **Flexibilität**: Durch die Verwendung von Parametern können Sie das Skript leicht anpassen, um andere Zeilen oder Spalten zu analysieren.
- **Speichern der Ergebnisse**: Es besteht die Möglichkeit, die Ergebnisse in eine CSV-Datei zu speichern, indem Sie die entsprechende Zeile entkommentieren.

### Ausführung des Skripts

Speichern Sie das Skript in einer Datei, z.B. `analyse_fallzahlen.py`, und führen Sie es in Ihrer Kommandozeile aus:

```bash
python analyse_fallzahlen.py
```

Stellen Sie sicher, dass sich `Fallzahlen.xlsx` im gleichen Verzeichnis wie das Skript befindet oder geben Sie den vollständigen Pfad zur Excel-Datei an.